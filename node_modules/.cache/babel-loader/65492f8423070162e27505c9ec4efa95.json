{"ast":null,"code":"import _createClass from \"/home/simple/dots-boxes/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/simple/dots-boxes/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/simple/dots-boxes/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/simple/dots-boxes/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _classCallCheck from \"/home/simple/dots-boxes/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nvar _jsxFileName = \"/home/simple/dots-boxes/src/components/BoxCanvas.js\";\nimport React, { Component } from 'react';\nimport { WIDTH, HEIGHT } from './constants';\nimport { Stage, Layer, Rect, Circle } from 'react-konva';\nimport Konva from 'konva';\n\nvar Box = function Box(x, y, w, h) {\n  _classCallCheck(this, Box);\n\n  this.w = w;\n  this.y = y;\n  this.left = x;\n  this.top = y;\n  this.right = x + w;\n  this.bottom = y + h;\n  this.highlight = null;\n\n  this.contains = function (x, y) {\n    return x >= this.left && x < this.right && y >= this.top && y < this.bottom;\n  };\n\n  this.drawFill = function () {};\n\n  this.drawSide = function (side, color) {\n    switch (side) {\n      case 0:\n    }\n  };\n\n  this.drawSides = function () {\n    if (this.highlight != null) {\n      this.drawSide(this.highlight, 'blue');\n    }\n  };\n};\n\nvar BoxCanvas =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(BoxCanvas, _Component);\n\n  function BoxCanvas() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, BoxCanvas);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(BoxCanvas)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      color: 'grey',\n      row: 4,\n      colomn: 6,\n      marginWidth: 0,\n      marginHeight: 0\n    };\n\n    _this.drawCircleGrid = function () {\n      var children = [];\n\n      for (var i = 0; i < _this.state.row + 1; i++) {\n        for (var j = 0; j < _this.state.colomn + 1; j++) {\n          children.push({\n            x: _this.gridX(j),\n            y: _this.gridY(i)\n          });\n        }\n      }\n\n      return children;\n    };\n\n    _this.gridX = function (i) {\n      return _this.state.marginWidth * (i + 1);\n    };\n\n    _this.gridY = function (j) {\n      return _this.state.marginHeight * (j + 1);\n    };\n\n    _this.boxes = [];\n\n    _this.newGame = function () {\n      // playersTurn = Math.random() >= 0.5;\n      for (var i = 0; i < _this.state.row; i++) {\n        _this.boxes[i] = [];\n\n        for (var j = 0; j < _this.state.colomn; j++) {\n          _this.boxes[i][j] = new Box(_this.gridX(j), _this.gridY(i), _this.state.marginWidth, _this.state.marginHeight);\n        }\n      }\n    };\n\n    _this.drawBoxes = function () {\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = _this.boxes[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var row = _step.value;\n          var _iteratorNormalCompletion2 = true;\n          var _didIteratorError2 = false;\n          var _iteratorError2 = undefined;\n\n          try {\n            for (var _iterator2 = row[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n              var box = _step2.value;\n              box.drawSides();\n              box.drawFill();\n            }\n          } catch (err) {\n            _didIteratorError2 = true;\n            _iteratorError2 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n                _iterator2.return();\n              }\n            } finally {\n              if (_didIteratorError2) {\n                throw _iteratorError2;\n              }\n            }\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n    };\n\n    _this.handleClick = function () {\n      _this.setState({\n        color: Konva.Util.getRandomColor()\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(BoxCanvas, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      this.setState({\n        marginWidth: WIDTH / (this.state.colomn + 2),\n        marginHeight: HEIGHT / (this.state.row + 2)\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var border = 5;\n      var shadow = 5;\n      var circles = this.drawCircleGrid().map(function (el, index) {\n        return React.createElement(Circle, {\n          key: index,\n          x: el.x,\n          y: el.y,\n          radius: 10,\n          fill: \"red\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 107\n          },\n          __self: this\n        });\n      });\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      }, React.createElement(Stage, {\n        width: WIDTH + border * 2 + shadow,\n        height: HEIGHT + border * 2 + shadow,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }, React.createElement(Layer, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      }, React.createElement(Rect, {\n        x: border,\n        y: border,\n        width: WIDTH + border,\n        height: HEIGHT + border,\n        fill: this.state.color,\n        shadowBlur: shadow,\n        stroke: 'black',\n        strokeWidth: border,\n        onClick: this.handleClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115\n        },\n        __self: this\n      }), circles)));\n    }\n  }]);\n\n  return BoxCanvas;\n}(Component);\n\nexport { BoxCanvas as default };","map":{"version":3,"sources":["/home/simple/dots-boxes/src/components/BoxCanvas.js"],"names":["React","Component","WIDTH","HEIGHT","Stage","Layer","Rect","Circle","Konva","Box","x","y","w","h","left","top","right","bottom","highlight","contains","drawFill","drawSide","side","color","drawSides","BoxCanvas","state","row","colomn","marginWidth","marginHeight","drawCircleGrid","children","i","j","push","gridX","gridY","boxes","newGame","drawBoxes","box","handleClick","setState","Util","getRandomColor","border","shadow","circles","map","el","index"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport {WIDTH, HEIGHT} from './constants'\nimport { Stage, Layer, Rect, Circle } from 'react-konva';\nimport Konva from 'konva';\n\nclass Box{\n    constructor(x, y, w, h){\n        this.w = w;\n        this.y = y;\n        this.left = x;\n        this.top = y;\n        this.right = x + w;\n        this.bottom = y + h;\n        this.highlight = null;\n\n        this.contains = function(x, y){\n            return x >= this.left && x < this.right && y >= this.top && y < this.bottom;\n        }\n\n        this.drawFill = function(){}\n\n        this.drawSide = function(side, color){\n            switch (side) {\n                case 0: \n            }\n        }\n\n        this.drawSides = function(){\n            if (this.highlight != null){\n                this.drawSide(this.highlight, 'blue')\n            }\n        }\n    }       \n}\n\nexport default class BoxCanvas extends Component{\n    \n    state = {\n        color: 'grey',\n        row: 4,\n        colomn: 6,\n        marginWidth: 0,\n        marginHeight: 0\n    };\n\n\n\n    componentWillMount(){\n        this.setState({\n            marginWidth: WIDTH / (this.state.colomn + 2),\n            marginHeight: HEIGHT / (this.state.row + 2)\n        })\n    }\n    \n    drawCircleGrid = () => {\n        var children = [];\n        for (let i = 0; i < this.state.row + 1; i++){\n            for (let j = 0; j < this.state.colomn + 1; j++){\n                children.push({x: this.gridX(j),y: this.gridY(i)});       \n            }\n        }\n\n        return children\n\n    }\n\n    gridX = (i) => this.state.marginWidth * (i + 1) \n\n    gridY = (j) => this.state.marginHeight  * (j + 1)\n\n\n    boxes = []\n    newGame = () => {\n        // playersTurn = Math.random() >= 0.5;\n\n        \n        for (let i = 0; i < this.state.row; i++ ){\n            this.boxes[i] = []\n            for(let j = 0; j < this.state.colomn; j++){\n                this.boxes[i][j] = new Box(this.gridX(j), this.gridY(i), this.state.marginWidth, this.state.marginHeight);\n            }\n        }\n    }\n\n    drawBoxes = () => {\n        for (let row of this.boxes){\n            for(let box of row){\n                box.drawSides();\n                box.drawFill();\n            }\n        }\n    }\n\n    \n    \n    handleClick = () => {\n        this.setState({\n          color: Konva.Util.getRandomColor()\n        });\n    }\n    \n    render(){   \n        const border = 5;\n        const shadow = 5;\n\n        const circles = this.drawCircleGrid().map((el,index)=>{\n            return <Circle key={index} x={el.x} y={el.y} radius={10} fill=\"red\" />\n        }) \n\n        return(\n            <div>\n                 \n                <Stage width={WIDTH+border*2+shadow} height={HEIGHT+border*2+shadow}>\n                    <Layer> \n                        <Rect\n                            x={border}\n                            y={border}\n                            width={WIDTH+border}\n                            height={HEIGHT+border}\n                            fill={this.state.color}\n                            shadowBlur={shadow}\n                            stroke={'black'} \n                            strokeWidth={border}\n                            onClick={this.handleClick}\n                        >  \n                        </Rect>\n                        \n                        {circles}\n                        \n                    </Layer>\n                </Stage> \n            </div>\n        )\n    }\n}"]},"metadata":{},"sourceType":"module"}