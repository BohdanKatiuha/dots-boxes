{"ast":null,"code":"import _classCallCheck from \"/home/simple/dots-boxes/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/simple/dots-boxes/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/simple/dots-boxes/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/simple/dots-boxes/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/simple/dots-boxes/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/simple/dots-boxes/src/components/Box.js\";\nimport React, { Component } from 'react'; // import Konva from 'konva';\n\nimport { Rect } from 'react-konva';\n\nvar Box =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Box, _Component);\n\n  function Box() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Box);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Box)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      color: '',\n      leftSide: false,\n      topSide: false,\n      rightSide: false,\n      bottomSide: false\n    };\n\n    _this.componentWillMount = function () {\n      return _this.setState({\n        color: _this.props.color\n      });\n    };\n\n    _this.componentDidUpdate = function (prevProps, nextState) {\n      if (prevProps !== _this.props) {\n        if (_this.state.leftSide && _this.state.topSide && _this.state.rightSide && _this.state.bottomSide) {\n          _this.setState({\n            color: 'white'\n          });\n        }\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(Box, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          left = _this$props.left,\n          top = _this$props.top,\n          right = _this$props.right,\n          bottom = _this$props.bottom,\n          index = _this$props.index,\n          topSide = _this$props.topSide;\n      console.log(topSide);\n      return React.createElement(Rect, {\n        key: index,\n        x: left,\n        y: top,\n        width: right - left,\n        height: bottom - top,\n        fill: this.state.color //shadowBlur={2}\n        ,\n        stroke: 'black',\n        strokeWidth: 1,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return Box;\n}(Component);\n\nexport { Box as default };","map":{"version":3,"sources":["/home/simple/dots-boxes/src/components/Box.js"],"names":["React","Component","Rect","Box","state","color","leftSide","topSide","rightSide","bottomSide","componentWillMount","setState","props","componentDidUpdate","prevProps","nextState","left","top","right","bottom","index","console","log"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC,C,CACA;;AACA,SAASC,IAAT,QAAqB,aAArB;;IAEqBC,G;;;;;;;;;;;;;;;;;UACjBC,K,GAAQ;AACJC,MAAAA,KAAK,EAAE,EADH;AAEJC,MAAAA,QAAQ,EAAE,KAFN;AAGJC,MAAAA,OAAO,EAAE,KAHL;AAIJC,MAAAA,SAAS,EAAE,KAJP;AAKJC,MAAAA,UAAU,EAAE;AALR,K;;UAQRC,kB,GAAoB;AAAA,aAAM,MAAKC,QAAL,CAAc;AAACN,QAAAA,KAAK,EAAE,MAAKO,KAAL,CAAWP;AAAnB,OAAd,CAAN;AAAA,K;;UAkCpBQ,kB,GAAqB,UAACC,SAAD,EAAYC,SAAZ,EAA0B;AAC3C,UAAID,SAAS,KAAK,MAAKF,KAAvB,EAA6B;AAEzB,YAAI,MAAKR,KAAL,CAAWE,QAAX,IAAuB,MAAKF,KAAL,CAAWG,OAAlC,IAA6C,MAAKH,KAAL,CAAWI,SAAxD,IAAqE,MAAKJ,KAAL,CAAWK,UAApF,EAA+F;AAC3F,gBAAKE,QAAL,CAAc;AAACN,YAAAA,KAAK,EAAE;AAAR,WAAd;AACH;AACJ;AACJ,K;;;;;;;6BAEO;AAAA,wBAC+C,KAAKO,KADpD;AAAA,UACGI,IADH,eACGA,IADH;AAAA,UACSC,GADT,eACSA,GADT;AAAA,UACcC,KADd,eACcA,KADd;AAAA,UACqBC,MADrB,eACqBA,MADrB;AAAA,UAC6BC,KAD7B,eAC6BA,KAD7B;AAAA,UACoCb,OADpC,eACoCA,OADpC;AAEJc,MAAAA,OAAO,CAACC,GAAR,CAAYf,OAAZ;AACA,aACI,oBAAC,IAAD;AACI,QAAA,GAAG,EAAIa,KADX;AAEI,QAAA,CAAC,EAAEJ,IAFP;AAGI,QAAA,CAAC,EAAEC,GAHP;AAII,QAAA,KAAK,EAAEC,KAAK,GAAGF,IAJnB;AAKI,QAAA,MAAM,EAAEG,MAAM,GAAGF,GALrB;AAMI,QAAA,IAAI,EAAE,KAAKb,KAAL,CAAWC,KANrB,CAOI;AAPJ;AAQI,QAAA,MAAM,EAAE,OARZ;AASI,QAAA,WAAW,EAAE,CATjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ;AAaH;;;;EApE4BJ,S;;SAAZE,G","sourcesContent":["import React, { Component } from 'react';\n// import Konva from 'konva';\nimport { Rect } from 'react-konva';\n\nexport default class Box extends Component{\n    state = {\n        color: '',\n        leftSide: false,\n        topSide: false,\n        rightSide: false,\n        bottomSide: false\n    }\n\n    componentWillMount =() => this.setState({color: this.props.color})\n\n    // componentDidUpdate(prevProps, prevState){\n    //      if(this.props.color === prevProps){\n    //     //     this.setState({color: this.props.color})\n    //     // }\n    //         if( this.state.leftSide && this.state.topSide && this.state.rightSide && this.state.bottomSide){\n    //             this.setState({color: 'white'})\n    //         }\n    //     }\n    // }\n\n    // shouldComponentUpdate(nextProps, nextState){\n    //     if(this.props.color !== nextProps){\n    //         //     this.setState({color: this.props.color})\n    //         // }\n    //             if( this.state.leftSide && this.state.topSide && this.state.rightSide && this.state.bottomSide){\n    //                 this.setState({color: 'white'})\n    //             }\n    //         }\n    // }\n\n    // componentWillReceiveProps = (nextProps) => {\n    //     if (nextProps !== this.props){\n           \n    //         this.setState({\n    //             leftSide: this.props.leftSide,\n    //             topSide: this.props.topSide,\n    //             rightSide: this.props.rightSide,\n    //             bottomSide: this.props.bottomSide\n    //         })\n    //     }\n    // }\n\n    componentDidUpdate = (prevProps, nextState) => {\n        if (prevProps !== this.props){\n            \n            if( this.state.leftSide && this.state.topSide && this.state.rightSide && this.state.bottomSide){\n                this.setState({color: 'white'})\n            }\n        }  \n    }\n\n    render(){\n        const {left, top, right, bottom, index, topSide} = this.props\n        console.log(topSide)\n        return(\n            <Rect\n                key = {index}\n                x={left}\n                y={top}\n                width={right - left}\n                height={bottom - top}\n                fill={this.state.color} \n                //shadowBlur={2}\n                stroke={'black'} \n                strokeWidth={1}\n            /> \n        )\n    }\n}"]},"metadata":{},"sourceType":"module"}