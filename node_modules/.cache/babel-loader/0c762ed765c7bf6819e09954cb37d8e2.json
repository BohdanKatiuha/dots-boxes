{"ast":null,"code":"import _classCallCheck from \"/home/simple/dots-boxes/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/simple/dots-boxes/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/simple/dots-boxes/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/simple/dots-boxes/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/simple/dots-boxes/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/simple/dots-boxes/src/components/BodyCanvas.js\";\nimport React, { Component } from 'react';\nimport { WIDTH, HEIGHT } from './constants';\nimport { Stage, Layer, Rect, Circle } from 'react-konva'; // import Konva from 'konva';\n\nimport SideLine from './SideLine';\nimport Box from './Box';\n\nvar BoxCanvas =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(BoxCanvas, _Component);\n\n  function BoxCanvas() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, BoxCanvas);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(BoxCanvas)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      colorBody: '#002266',\n      colorLine: '#0099ff',\n      colorBoxes: '#e6f5ff',\n      colorCircle: '#c2c2d6',\n      row: 3,\n      colomn: 4,\n      marginWidth: 0,\n      marginHeight: 0,\n      coordsBoxes: [],\n      // \n      playerMove: '',\n      // who should move \n      player1CounterFillBox: 0,\n      player2CounterFillBox: 0\n    };\n\n    _this.gridX = function (i) {\n      return _this.state.marginWidth * (i + 1);\n    };\n\n    _this.gridY = function (j) {\n      return _this.state.marginHeight * (j + 1);\n    };\n\n    _this.circleGridCoords = function () {\n      var circleCoords = [];\n\n      for (var i = 0; i < _this.state.row + 1; i++) {\n        for (var j = 0; j < _this.state.colomn + 1; j++) {\n          circleCoords.push({\n            x: _this.gridX(j),\n            y: _this.gridY(i)\n          });\n        }\n      }\n\n      return circleCoords;\n    };\n\n    _this.lineVerticalCoords = function () {\n      var verticalLineCoords = [];\n\n      for (var i = 0; i < _this.state.row + 1; i++) {\n        for (var j = 0; j < _this.state.colomn; j++) {\n          verticalLineCoords.push({\n            x0: _this.gridX(j),\n            y0: _this.gridY(i),\n            x1: _this.gridX(j) + _this.state.marginWidth,\n            y1: _this.gridY(i)\n          });\n        }\n      }\n\n      return verticalLineCoords;\n    };\n\n    _this.lineHorizontalCoords = function () {\n      var horizontalLineCoords = [];\n\n      for (var i = 0; i < _this.state.row; i++) {\n        for (var j = 0; j < _this.state.colomn + 1; j++) {\n          horizontalLineCoords.push({\n            x0: _this.gridX(j),\n            y0: _this.gridY(i),\n            x1: _this.gridX(j),\n            y1: _this.gridY(i) + _this.state.marginHeight\n          });\n        }\n      }\n\n      return horizontalLineCoords;\n    };\n\n    _this.boxesCoords = function () {\n      var coordsBoxes = [];\n\n      for (var i = 0; i < _this.state.row; i++) {\n        for (var j = 0; j < _this.state.colomn; j++) {\n          coordsBoxes.push({\n            left: _this.gridX(j),\n            top: _this.gridY(i),\n            right: _this.gridX(j) + _this.state.marginWidth,\n            bottom: _this.gridY(i) + _this.state.marginHeight,\n            sides: {\n              left: false,\n              top: false,\n              right: false,\n              bottom: false\n            },\n            color: _this.state.colorBoxes\n          });\n        }\n      }\n\n      _this.setState({\n        coordsBoxes: coordsBoxes\n      });\n    };\n\n    _this.checkAllSideIsClick = function (box, playerMove, checkPlayerMove) {\n      if (box.sides.top && box.sides.left && box.sides.right && box.sides.bottom) {\n        box.color = _this.state.playerMove ? '#33ff33' : '#ff33ff';\n        if (_this.state.playerMove) _this.setState({\n          player2CounterFillBox: _this.state.player2CounterFillBox + 1\n        });else _this.setState({\n          player1CounterFillBox: _this.state.player1CounterFillBox + 1\n        });\n        playerMove = checkPlayerMove ? !playerMove : playerMove;\n        checkPlayerMove = false;\n      }\n    };\n\n    _this.handleClickLine = function (el) {\n      // console.log(this.state.course)\n      var playerMove = _this.state.playerMove;\n      var checkPlayerMove = true;\n\n      var coords = _this.state.coordsBoxes.forEach(function (boxCoords) {\n        console.log(boxCoords);\n\n        if (el[0] === boxCoords.left && el[1] === boxCoords.top && el[2] === boxCoords.left && el[3] === boxCoords.bottom) {\n          boxCoords.sides.left = true;\n\n          _this.checkAllSideIsClick(boxCoords, playerMove, checkplayerMove); // if (boxCoords.sides.top && boxCoords.sides.left && boxCoords.sides.right && boxCoords.sides.bottom){ \n          //     boxCoords.color = this.state.playerMove ? '#33ff33' : '#ff33ff'\n          //     this.state.playerMove ? this.setState({ player2CounterFillBox : this.state.player2CounterFillBox +1}) : this.setState({ player1CounterFillBox : this.state.player1CounterFillBox +1})\n          //     playerMove = (checkPlayerMove) ? !playerMove : playerMove\n          //     checkPlayerMove = false\n          // }\n\n        } else if (el[0] === boxCoords.left && el[1] === boxCoords.top && el[2] === boxCoords.right && el[3] === boxCoords.top) {\n          boxCoords.sides.top = true;\n\n          if (boxCoords.sides.top && boxCoords.sides.left && boxCoords.sides.right && boxCoords.sides.bottom) {\n            boxCoords.color = _this.state.playerMove ? '#33ff33' : '#ff33ff';\n            _this.state.playerMove ? _this.setState({\n              player2CounterFillBox: _this.state.player2CounterFillBox + 1\n            }) : _this.setState({\n              player1CounterFillBox: _this.state.player1CounterFillBox + 1\n            });\n            playerMove = checkPlayerMove ? !playerMove : playerMove;\n            checkPlayerMove = false;\n          }\n        } else if (el[0] === boxCoords.right && el[1] === boxCoords.top && el[2] === boxCoords.right && el[3] === boxCoords.bottom) {\n          boxCoords.sides.right = true;\n\n          if (boxCoords.sides.top && boxCoords.sides.left && boxCoords.sides.right && boxCoords.sides.bottom) {\n            boxCoords.color = _this.state.playerMove ? '#33ff33' : '#ff33ff';\n            _this.state.playerMove ? _this.setState({\n              player2CounterFillBox: _this.state.player2CounterFillBox + 1\n            }) : _this.setState({\n              player1CounterFillBox: _this.state.player1CounterFillBox + 1\n            });\n            playerMove = checkPlayerMove ? !playerMove : playerMove;\n            checkPlayerMove = false;\n          }\n        } else if (el[0] === boxCoords.left && el[1].toFixed(5) === boxCoords.bottom.toFixed(5) && el[2] === boxCoords.right && el[3].toFixed(5) === boxCoords.bottom.toFixed(5)) {\n          boxCoords.sides.bottom = true;\n\n          if (boxCoords.sides.top && boxCoords.sides.left && boxCoords.sides.right && boxCoords.sides.bottom) {\n            boxCoords.color = _this.state.playerMove ? '#33ff33' : '#ff33ff';\n            _this.state.playerMove ? _this.setState({\n              player2CounterFillBox: _this.state.player2CounterFillBox + 1\n            }) : _this.setState({\n              player1CounterFillBox: _this.state.player1CounterFillBox + 1\n            });\n            playerMove = checkPlayerMove ? !playerMove : playerMove;\n            checkPlayerMove = false;\n          }\n        }\n      });\n\n      return _this.setState({\n        coordsBox: coords,\n        playerMove: !playerMove\n      });\n    };\n\n    _this.whoIsWinner = function () {\n      if (_this.state.player1CounterFillBox + _this.state.player2CounterFillBox === _this.state.colomn * _this.state.row) {\n        if (_this.state.player1CounterFillBox > _this.state.player2CounterFillBox) {\n          return React.createElement(\"div\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 167\n            },\n            __self: this\n          }, \" playes1 wins game\");\n        } else if (_this.state.player1CounterFillBox < _this.state.player2CounterFillBox) {\n          return React.createElement(\"div\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 171\n            },\n            __self: this\n          }, \" playes2 wins game\");\n        } else {\n          return React.createElement(\"div\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 175\n            },\n            __self: this\n          }, \" draw game\");\n        }\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(BoxCanvas, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      this.setState({\n        marginWidth: WIDTH / (this.state.colomn + 2),\n        marginHeight: HEIGHT / (this.state.row + 2),\n        playerMove: (Math.random() > 0, 5) ? false : true\n      });\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.boxesCoords();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var border = 10;\n      var shadow = 10;\n      var circles = this.circleGridCoords().map(function (el, index) {\n        return React.createElement(Circle, {\n          key: index,\n          x: el.x,\n          y: el.y,\n          radius: 10,\n          fill: _this2.state.colorCircle,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 186\n          },\n          __self: this\n        });\n      });\n      var linesVertical = this.lineVerticalCoords().map(function (el, index) {\n        return React.createElement(SideLine, {\n          key: index,\n          x0: el.x0,\n          y0: el.y0,\n          x1: el.x1,\n          y1: el.y1 // index = {index}\n          ,\n          color: _this2.state.colorLine,\n          onClick: _this2.handleClickLine,\n          playerMove: _this2.state.playerMove,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 192\n          },\n          __self: this\n        });\n      });\n      var linesHorizontal = this.lineHorizontalCoords().map(function (el, index) {\n        return React.createElement(SideLine, {\n          key: index,\n          x0: el.x0,\n          y0: el.y0,\n          x1: el.x1,\n          y1: el.y1,\n          color: _this2.state.colorLine,\n          onClick: _this2.handleClickLine,\n          playerMove: _this2.state.playerMove,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 209\n          },\n          __self: this\n        });\n      }); // console.log(this.state.coordsBoxes)\n\n      var boxes = this.state.coordsBoxes.map(function (el, index) {\n        return React.createElement(Box, {\n          key: index,\n          left: el.left,\n          top: el.top,\n          right: el.right,\n          bottom: el.bottom,\n          color: el.color // leftSide = {el.sides.left}\n          // topSide = {el.sides.top}\n          // rightSide = {el.sides.right}\n          // bottomSide = {el.sides.bottom}\n          ,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 224\n          },\n          __self: this\n        });\n      });\n      var player1 = React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 239\n        },\n        __self: this\n      }, \" \", React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 239\n        },\n        __self: this\n      }, \"player 1\"), \" fill boxes: \", this.state.player1CounterFillBox, \" \");\n      var player2 = React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 240\n        },\n        __self: this\n      }, \" \", React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 240\n        },\n        __self: this\n      }, \"player 2\"), \" fill boxes: \", this.state.player2CounterFillBox, \" \");\n      var winner = this.whoIsWinner();\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 244\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 245\n        },\n        __self: this\n      }, player1, player2, winner), React.createElement(Stage, {\n        onMouseMove: this.highlightSide,\n        width: WIDTH + border * 2 + shadow,\n        height: HEIGHT + border * 2 + shadow,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 250\n        },\n        __self: this\n      }, React.createElement(Layer, {\n        ref: \"layer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 251\n        },\n        __self: this\n      }, React.createElement(Rect, {\n        x: border,\n        y: border,\n        width: WIDTH + border,\n        height: HEIGHT + border,\n        fill: this.state.colorBody,\n        shadowBlur: shadow,\n        stroke: '#0099ff',\n        strokeWidth: border,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 252\n        },\n        __self: this\n      }), boxes, linesVertical, linesHorizontal, circles)));\n    }\n  }]);\n\n  return BoxCanvas;\n}(Component);\n\nexport { BoxCanvas as default };","map":{"version":3,"sources":["/home/simple/dots-boxes/src/components/BodyCanvas.js"],"names":["React","Component","WIDTH","HEIGHT","Stage","Layer","Rect","Circle","SideLine","Box","BoxCanvas","state","colorBody","colorLine","colorBoxes","colorCircle","row","colomn","marginWidth","marginHeight","coordsBoxes","playerMove","player1CounterFillBox","player2CounterFillBox","gridX","i","gridY","j","circleGridCoords","circleCoords","push","x","y","lineVerticalCoords","verticalLineCoords","x0","y0","x1","y1","lineHorizontalCoords","horizontalLineCoords","boxesCoords","left","top","right","bottom","sides","color","setState","checkAllSideIsClick","box","checkPlayerMove","handleClickLine","el","coords","forEach","boxCoords","console","log","checkplayerMove","toFixed","coordsBox","whoIsWinner","Math","random","border","shadow","circles","map","index","linesVertical","linesHorizontal","boxes","player1","player2","winner","highlightSide"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport {WIDTH, HEIGHT} from './constants'\nimport { Stage, Layer, Rect, Circle } from 'react-konva';\n// import Konva from 'konva';\nimport SideLine from './SideLine'\nimport Box from './Box'\n\n\nexport default class BoxCanvas extends Component{\n    \n    state = {\n        colorBody: '#002266',\n        colorLine: '#0099ff',\n        colorBoxes: '#e6f5ff',\n        colorCircle: '#c2c2d6',\n        row: 3,\n        colomn: 4,\n        marginWidth: 0,\n        marginHeight: 0,\n        coordsBoxes: [], // \n        playerMove: '', // who should move \n        player1CounterFillBox: 0, \n        player2CounterFillBox: 0\n    };\n\n    componentWillMount(){ \n        this.setState({\n            marginWidth: WIDTH / (this.state.colomn + 2),\n            marginHeight: HEIGHT / (this.state.row + 2),\n            playerMove: ( Math.random() > 0,5 ) ? false : true\n        })\n        \n    } \n\n    componentDidMount(){\n        this.boxesCoords()\n    }\n\n    gridX = (i) => this.state.marginWidth * (i + 1) \n\n    gridY = (j) => this.state.marginHeight  * (j + 1)\n    \n    circleGridCoords = () => {\n        var circleCoords = [];\n        for (let i = 0; i < this.state.row + 1; i++){\n            for (let j = 0; j < this.state.colomn + 1; j++){\n                circleCoords.push({x: this.gridX(j),y: this.gridY(i)});       \n            }\n        }\n        return circleCoords\n    }\n\n    lineVerticalCoords = () => {\n        var verticalLineCoords = [];\n        for (let i = 0; i < this.state.row + 1; i++){\n            for (let j = 0; j < this.state.colomn; j++){\n                verticalLineCoords.push({\n                    x0: this.gridX(j), \n                    y0: this.gridY(i), \n                    x1: this.gridX(j) + this.state.marginWidth, \n                    y1: this.gridY(i)}\n                );       \n            }\n        }\n        return verticalLineCoords\n    }\n\n    lineHorizontalCoords = () => {\n        var horizontalLineCoords = [];\n        for (let i = 0; i < this.state.row ; i++){\n            for (let j = 0; j < this.state.colomn +1; j++){\n                horizontalLineCoords.push({\n                    x0: this.gridX(j), \n                    y0: this.gridY(i), \n                    x1: this.gridX(j), \n                    y1: this.gridY(i) + this.state.marginHeight}\n                );       \n            }\n        }\n        return horizontalLineCoords\n    }\n\n    \n    boxesCoords = () => {\n        var coordsBoxes = []\n        for (let i = 0; i < this.state.row ; i++){\n            for (let j = 0; j < this.state.colomn; j++){\n                coordsBoxes.push({\n                        left: this.gridX(j), \n                        top: this.gridY(i), \n                        right: this.gridX(j) + this.state.marginWidth, \n                        bottom: this.gridY(i) + this.state.marginHeight,\n                        sides: {left: false, top: false, right: false, bottom: false},\n                        color: this.state.colorBoxes\n                    })\n                      \n            }\n        }\n\n        this.setState({coordsBoxes: coordsBoxes})\n    }\n\n    checkAllSideIsClick = (box, playerMove, checkPlayerMove) =>{\n        if (box.sides.top && box.sides.left && box.sides.right && box.sides.bottom){ \n            box.color = this.state.playerMove ? '#33ff33' : '#ff33ff'\n            if (this.state.playerMove) \n                 this.setState({player2CounterFillBox : this.state.player2CounterFillBox +1}) \n            else \n                this.setState({player1CounterFillBox : this.state.player1CounterFillBox +1})\n\n            playerMove = (checkPlayerMove) ? !playerMove : playerMove\n            checkPlayerMove = false\n        }\n    }\n\n    handleClickLine = (el) => {\n        // console.log(this.state.course)\n        var playerMove = this.state.playerMove\n        var checkPlayerMove = true\n        const coords = this.state.coordsBoxes.forEach(boxCoords =>{\n            console.log(boxCoords)\n            \n            if( el[0] === boxCoords.left && el[1] === boxCoords.top && el[2] === boxCoords.left && el[3]  === boxCoords.bottom ){\n                boxCoords.sides.left = true\n                this.checkAllSideIsClick(boxCoords, playerMove, checkplayerMove);\n                // if (boxCoords.sides.top && boxCoords.sides.left && boxCoords.sides.right && boxCoords.sides.bottom){ \n                //     boxCoords.color = this.state.playerMove ? '#33ff33' : '#ff33ff'\n                //     this.state.playerMove ? this.setState({ player2CounterFillBox : this.state.player2CounterFillBox +1}) : this.setState({ player1CounterFillBox : this.state.player1CounterFillBox +1})\n                //     playerMove = (checkPlayerMove) ? !playerMove : playerMove\n                //     checkPlayerMove = false\n\n                // }\n            } else if(el[0] === boxCoords.left && el[1] === boxCoords.top && el[2]  === boxCoords.right && el[3]  === boxCoords.top){\n                boxCoords.sides.top = true\n                if (boxCoords.sides.top && boxCoords.sides.left && boxCoords.sides.right && boxCoords.sides.bottom){ \n                    boxCoords.color = this.state.playerMove ? '#33ff33' : '#ff33ff'\n                    this.state.playerMove ? this.setState({ player2CounterFillBox : this.state.player2CounterFillBox +1}) : this.setState({ player1CounterFillBox : this.state.player1CounterFillBox +1})\n                    playerMove = (checkPlayerMove) ? !playerMove : playerMove\n                    checkPlayerMove = false\n                }\n            } else if(el[0] === boxCoords.right && el[1] === boxCoords.top && el[2]  === boxCoords.right && el[3]  === boxCoords.bottom ){\n                boxCoords.sides.right = true\n                if (boxCoords.sides.top && boxCoords.sides.left && boxCoords.sides.right && boxCoords.sides.bottom){ \n                    boxCoords.color = this.state.playerMove ? '#33ff33' : '#ff33ff'\n                    this.state.playerMove ? this.setState({ player2CounterFillBox : this.state.player2CounterFillBox +1}) : this.setState({ player1CounterFillBox : this.state.player1CounterFillBox +1})\n                    playerMove = (checkPlayerMove) ? !playerMove : playerMove\n                    checkPlayerMove = false\n                }\n            } else if(el[0] === boxCoords.left && el[1].toFixed(5)  === boxCoords.bottom.toFixed(5) && el[2]  === boxCoords.right && el[3].toFixed(5) === boxCoords.bottom.toFixed(5) ){\n                boxCoords.sides.bottom = true\n                if (boxCoords.sides.top && boxCoords.sides.left && boxCoords.sides.right && boxCoords.sides.bottom){ \n                    boxCoords.color = this.state.playerMove ? '#33ff33' : '#ff33ff'\n                    this.state.playerMove ? this.setState({ player2CounterFillBox : this.state.player2CounterFillBox +1}) : this.setState({ player1CounterFillBox : this.state.player1CounterFillBox +1})\n                    playerMove = (checkPlayerMove) ? !playerMove : playerMove\n                    checkPlayerMove = false\n                }\n            } \n        })\n        \n        return this.setState({coordsBox: coords, playerMove: !playerMove })\n    }\n\n    whoIsWinner = () =>{\n        if(this.state.player1CounterFillBox + this.state.player2CounterFillBox === this.state.colomn * this.state.row){\n            if(this.state.player1CounterFillBox > this.state.player2CounterFillBox){\n                return(\n                    <div> playes1 wins game</div>\n                )\n            }else if (this.state.player1CounterFillBox < this.state.player2CounterFillBox){\n                return(\n                    <div> playes2 wins game</div>\n                )\n            }else{\n                return(\n                    <div> draw game</div>\n                )\n            }\n        }\n    }\n    \n    render(){   \n        const border = 10;\n        const shadow = 10;\n       \n        const circles = this.circleGridCoords().map((el,index)=>{\n            return <Circle key={index} x={el.x} y={el.y} radius={10} fill={this.state.colorCircle} />\n        })\n       \n        const linesVertical = this.lineVerticalCoords().map((el,index)=>{\n            return (\n                \n                <SideLine\n                    key = {index}  \n                    x0 ={el.x0}\n                    y0 = {el.y0}\n                    x1 = {el.x1} \n                    y1 = {el.y1}\n                    // index = {index}\n                    color = {this.state.colorLine}\n                    onClick = {this.handleClickLine}\n                    playerMove = {this.state.playerMove}\n                />\n            )\n        })\n\n        const linesHorizontal = this.lineHorizontalCoords().map((el,index)=>{\n            return (\n                \n                <SideLine\n                    key = {index} \n                    x0 ={el.x0}\n                    y0 = {el.y0}\n                    x1 = {el.x1} \n                    y1 = {el.y1}\n                    color = {this.state.colorLine}\n                    onClick = {this.handleClickLine}\n                    playerMove = {this.state.playerMove}\n                />\n            )\n        })\n        // console.log(this.state.coordsBoxes)\n        const boxes = this.state.coordsBoxes.map((el, index) =>{\n            return (\n                <Box\n                    key = {index}\n                    left={el.left}\n                    top={el.top}\n                    right={el.right}\n                    bottom={el.bottom}\n                    color={el.color}\n                    // leftSide = {el.sides.left}\n                    // topSide = {el.sides.top}\n                    // rightSide = {el.sides.right}\n                    // bottomSide = {el.sides.bottom}\n                />  \n            )\n        })\n\n        const player1 = <div> <h1>player 1</h1> fill boxes: {this.state.player1CounterFillBox} </div>\n        const player2 = <div> <h1>player 2</h1> fill boxes: {this.state.player2CounterFillBox} </div>\n        const winner = this.whoIsWinner()\n\n        return(\n            <div>\n                 <div>\n                     {player1}\n                     {player2}\n                     {winner}\n                 </div>\n                <Stage onMouseMove={this.highlightSide} width={WIDTH+border*2+shadow} height={HEIGHT+border*2+shadow}>\n                    <Layer ref= 'layer'> \n                        <Rect\n                            x={border}\n                            y={border}\n                            width={WIDTH+border}\n                            height={HEIGHT+border}\n                            fill={this.state.colorBody}\n                            shadowBlur={shadow}\n                            stroke={'#0099ff'} \n                            strokeWidth={border} \n                        />  \n                        {boxes}\n                        {linesVertical}\n                        {linesHorizontal}\n                        {circles}\n  \n                    </Layer>\n                </Stage> \n            </div>\n        )\n    }\n}\n"]},"metadata":{},"sourceType":"module"}