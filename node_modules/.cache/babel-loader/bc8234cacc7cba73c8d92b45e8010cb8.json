{"ast":null,"code":"import _classCallCheck from \"/home/simple/dots-boxes/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/simple/dots-boxes/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/simple/dots-boxes/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/simple/dots-boxes/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/simple/dots-boxes/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/simple/dots-boxes/src/components/BoxCanvas.js\";\nimport React, { Component } from 'react';\nimport { WIDTH, HEIGHT } from './constants';\nimport { Stage, Layer, Rect, Circle, Line } from 'react-konva';\nimport Konva from 'konva'; // const Side = {\n//     BOT: 0,\n//     LEFT: 1,\n//     RIGHT: 2,\n//     TOP: 3\n// }\n// class Box{\n//     constructor(x, y, w, h){\n//         this.w = w;\n//         this.y = y;\n//         this.left = x;\n//         this.top = y;\n//         this.right = x + w;\n//         this.bottom = y + h;\n//         this.highlight = null;\n//         this.sideBot = {owner: null, selected: false };\n//         this.sideLeft = {owner: null, selected: false };\n//         this.sideRight = {owner: null, selected: false };\n//         this.sideTop = {owner: null, selected: false };\n//         this.contains = function(x, y){\n//             return x >= this.left && x < this.right && y >= this.top && y < this.bottom;\n//         }\n//         this.drawFill = function(){}\n//         this.drawSide = function(side, color){\n//             switch (side) {\n//                 case Side.BOT:\n//                     this.drawLine(this.left, this.bottom, this.right, this.bottom, color);\n//                     break;\n//                 case Side.LEFT:\n//                     this.drawLine(this.left, this.top, this.left, this.bottom, color);\n//                     break; \n//                 case Side.RIGHT:\n//                     this.drawLine(this.right, this.top, this.right, this.bottom, color);\n//                     break; \n//                 case Side.TOP:\n//                     this.drawLine(this.left, this.top, this.right, this.top, color);\n//                     break;  \n//             }\n//         }\n//         this.drawSides = function(){\n//             if (this.highlight != null){\n//                 this.drawSide(this.highlight, 'blue')\n//             }\n//         }\n//         this.highlightSide = function(x, y){\n//             let dBot = this.bottom - y;\n//             let dLeft = x - this.left;\n//             let dRight = this.right - x;\n//             let dTop = this.top;\n//             let dClosest = Math.min(dBot, dLeft, dRight, dTop);\n//             if( dClosest == dBot && !this.sideBot.selected){\n//                 this.highlight = Side.BOT;\n//             }else if( dClosest == dLeft && !this.sideLeft.selected){\n//                 this.highlight = Side.LEFT;\n//             }else if( dClosest == dRight && !this.sideRight.selected){\n//                 this.highlight = Side.RIGHT;\n//             }else if( dClosest == dTop && !this.sideTop.selected){\n//                 this.highlight = Side.TOP;\n//             }\n//             return this.highlight\n//         }\n//     }       \n// }\n\nvar BoxCanvas =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(BoxCanvas, _Component);\n\n  function BoxCanvas() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, BoxCanvas);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(BoxCanvas)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      colorBody: 'grey',\n      colorLine: 'brown',\n      row: 4,\n      colomn: 6,\n      marginWidth: 0,\n      marginHeight: 0\n    };\n    _this.playersTurn = 0;\n\n    _this.circleGridCoords = function () {\n      var coords = [];\n\n      for (var i = 0; i < _this.state.row + 1; i++) {\n        for (var j = 0; j < _this.state.colomn + 1; j++) {\n          coords.push({\n            x: _this.gridX(j),\n            y: _this.gridY(i)\n          });\n        }\n      }\n\n      return coords;\n    };\n\n    _this.lineVerticalCoords = function () {\n      var coords = [];\n\n      for (var i = 0; i < _this.state.row + 1; i++) {\n        for (var j = 0; j < _this.state.colomn; j++) {\n          coords.push({\n            x0: _this.gridX(j),\n            y0: _this.gridY(i),\n            x1: _this.gridX(j) + _this.state.marginWidth,\n            y1: _this.gridY(i)\n          });\n        }\n      }\n\n      return coords;\n    };\n\n    _this.lineHorisontalCoords = function () {\n      var coords = [];\n\n      for (var i = 0; i < _this.state.row; i++) {\n        for (var j = 0; j < _this.state.colomn + 1; j++) {\n          coords.push({\n            x0: _this.gridX(j),\n            y0: _this.gridY(i),\n            x1: _this.gridX(j),\n            y1: _this.gridY(i) + _this.state.marginHeight\n          });\n        }\n      }\n\n      return coords;\n    };\n\n    _this.gridX = function (i) {\n      return _this.state.marginWidth * (i + 1);\n    };\n\n    _this.gridY = function (j) {\n      return _this.state.marginHeight * (j + 1);\n    };\n\n    _this.handleClick = function () {\n      _this.setState({\n        color: Konva.Util.getRandomColor()\n      });\n    };\n\n    _this.handleMouseMove = function () {\n      _this.setState({\n        colorLine: 'yellow'\n      });\n    };\n\n    _this.drawLine = function (x0, y0, x1, y1, index) {\n      return React.createElement(Line, {\n        key: index,\n        points: [x1, y1, x0, y0],\n        tension: -0.5,\n        stroke: _this.state.colorLine,\n        shadowBlur: 2,\n        strokeWidth: 8,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158\n        },\n        __self: this\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(BoxCanvas, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      this.setState({\n        marginWidth: WIDTH / (this.state.colomn + 2),\n        marginHeight: HEIGHT / (this.state.row + 2)\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var border = 5;\n      var shadow = 5; // this.newGame();\n\n      var circles = this.circleGridCoords().map(function (el, index) {\n        return React.createElement(Circle, {\n          key: index,\n          x: el.x,\n          y: el.y,\n          radius: 10,\n          fill: \"red\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 175\n          },\n          __self: this\n        });\n      }); // const lines = this.drawLine(20,20,100,20)\n\n      var linesVertical = this.lineVerticalCoords().map(function (el, index) {\n        return _this2.drawLine(el.x0, el.y0, el.x1, el.y1, index);\n      });\n      var linesHorisontal = this.lineHorisontalCoords().map(function (el, index) {\n        return _this2.drawLine(el.x0, el.y0, el.x1, el.y1, index);\n      });\n      console.log(linesHorisontal);\n      console.log(linesVertical);\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 191\n        },\n        __self: this\n      }, React.createElement(Stage, {\n        onMouseMove: this.highlightSide,\n        width: WIDTH + border * 2 + shadow,\n        height: HEIGHT + border * 2 + shadow,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 193\n        },\n        __self: this\n      }, React.createElement(Layer, {\n        ref: \"layer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 194\n        },\n        __self: this\n      }, React.createElement(Rect, {\n        x: border,\n        y: border,\n        width: WIDTH + border,\n        height: HEIGHT + border,\n        fill: this.state.colorBody,\n        shadowBlur: shadow,\n        stroke: 'black',\n        strokeWidth: border // onClick={this.handleClick}\n        ,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 195\n        },\n        __self: this\n      }), linesVertical, linesHorisontal, circles)));\n    }\n  }]);\n\n  return BoxCanvas;\n}(Component); // boxes = []\n// newGame = () => {\n//     this.playersTurn = Math.random() >= 0.5;\n//     for (let i = 0; i < this.state.row; i++ ){\n//         this.boxes[i] = []\n//         for(let j = 0; j < this.state.colomn; j++){\n//             this.boxes[i][j] = new Box(this.gridX(j), this.gridY(i), this.state.marginWidth, this.state.marginHeight);\n//         }\n//     }\n// }\n// drawBoxes = () => {\n//     for (let row of this.boxes){\n//         for(let box of row){\n//             box.drawSides();\n//             box.drawFill();\n//         }\n//     }\n// }\n// highlightSide = (x, y) => {\n//     // clear previous highlighting\n//     for (let row of this.boxes) {\n//         for (let square of row) {\n//             square.highlight = null;\n//         }\n//     }\n//     // check each cell\n//     let rows = this.boxes.length;\n//     let cols = this.boxes[0].length;\n//     var currentCells = [];\n//     OUTER: for (let i = 0; i < rows; i++) {\n//         for (let j = 0; j < cols; j++) {\n//             if (this.boxes[i][j].contains(x, y)) {\n//                 // highlight current\n//                 let side = this.boxes[i][j].highlightSide(x, y);\n//                 if (side != null) {\n//                     currentCells.push({row: i, col: j});\n//                 }\n//                 // determine neighbour\n//                 let row = i, col = j, highlight, neighbour = true;\n//                 if (side == Side.LEFT && j > 0) {\n//                     col = j - 1;\n//                     highlight = Side.RIGHT;\n//                 } else if (side == Side.RIGHT && j < cols - 1) {\n//                     col = j + 1;\n//                     highlight = Side.LEFT;\n//                 } else if (side == Side.TOP && i > 0) {\n//                     row = i - 1;\n//                     highlight = Side.BOT;\n//                 } else if (side == Side.BOT && i < rows - 1) {\n//                     row = i + 1;\n//                     highlight = Side.TOP;\n//                 } else {\n//                     neighbour = false;\n//                 }\n//                 // highlight neighbour\n//                 if (neighbour) {\n//                     this.boxes[row][col].highlight = highlight;\n//                     currentCells.push({row: row, col: col});\n//                 }\n//                 // no need to continue\n//                 break OUTER;\n//             }\n//         }\n//     }\n// }\n\n\nexport { BoxCanvas as default };","map":{"version":3,"sources":["/home/simple/dots-boxes/src/components/BoxCanvas.js"],"names":["React","Component","WIDTH","HEIGHT","Stage","Layer","Rect","Circle","Line","Konva","BoxCanvas","state","colorBody","colorLine","row","colomn","marginWidth","marginHeight","playersTurn","circleGridCoords","coords","i","j","push","x","gridX","y","gridY","lineVerticalCoords","x0","y0","x1","y1","lineHorisontalCoords","handleClick","setState","color","Util","getRandomColor","handleMouseMove","drawLine","index","border","shadow","circles","map","el","linesVertical","linesHorisontal","console","log","highlightSide"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport {WIDTH, HEIGHT} from './constants'\nimport { Stage, Layer, Rect, Circle, Line } from 'react-konva';\nimport Konva from 'konva';\n\n// const Side = {\n//     BOT: 0,\n//     LEFT: 1,\n//     RIGHT: 2,\n//     TOP: 3\n// }\n\n// class Box{\n//     constructor(x, y, w, h){\n//         this.w = w;\n//         this.y = y;\n//         this.left = x;\n//         this.top = y;\n//         this.right = x + w;\n//         this.bottom = y + h;\n\n//         this.highlight = null;\n//         this.sideBot = {owner: null, selected: false };\n//         this.sideLeft = {owner: null, selected: false };\n//         this.sideRight = {owner: null, selected: false };\n//         this.sideTop = {owner: null, selected: false };\n        \n//         this.contains = function(x, y){\n//             return x >= this.left && x < this.right && y >= this.top && y < this.bottom;\n//         }\n\n//         this.drawFill = function(){}\n\n//         this.drawSide = function(side, color){\n//             switch (side) {\n//                 case Side.BOT:\n//                     this.drawLine(this.left, this.bottom, this.right, this.bottom, color);\n//                     break;\n//                 case Side.LEFT:\n//                     this.drawLine(this.left, this.top, this.left, this.bottom, color);\n//                     break; \n//                 case Side.RIGHT:\n//                     this.drawLine(this.right, this.top, this.right, this.bottom, color);\n//                     break; \n//                 case Side.TOP:\n//                     this.drawLine(this.left, this.top, this.right, this.top, color);\n//                     break;  \n//             }\n//         }\n\n//         this.drawSides = function(){\n//             if (this.highlight != null){\n//                 this.drawSide(this.highlight, 'blue')\n//             }\n//         }\n\n//         this.highlightSide = function(x, y){\n\n//             let dBot = this.bottom - y;\n//             let dLeft = x - this.left;\n//             let dRight = this.right - x;\n//             let dTop = this.top;\n\n//             let dClosest = Math.min(dBot, dLeft, dRight, dTop);\n\n//             if( dClosest == dBot && !this.sideBot.selected){\n//                 this.highlight = Side.BOT;\n//             }else if( dClosest == dLeft && !this.sideLeft.selected){\n//                 this.highlight = Side.LEFT;\n//             }else if( dClosest == dRight && !this.sideRight.selected){\n//                 this.highlight = Side.RIGHT;\n//             }else if( dClosest == dTop && !this.sideTop.selected){\n//                 this.highlight = Side.TOP;\n//             }\n\n//             return this.highlight\n//         }\n//     }       \n// }\n\n\nexport default class BoxCanvas extends Component{\n    \n    state = {\n        colorBody: 'grey',\n        colorLine: 'brown',\n        row: 4,\n        colomn: 6,\n        marginWidth: 0,\n        marginHeight: 0\n    };\n\n    playersTurn = 0;\n\n    componentWillMount(){\n        this.setState({\n            marginWidth: WIDTH / (this.state.colomn + 2),\n            marginHeight: HEIGHT / (this.state.row + 2)\n        })\n        \n        \n    }\n\n    \n    \n    circleGridCoords = () => {\n        var coords = [];\n        for (let i = 0; i < this.state.row + 1; i++){\n            for (let j = 0; j < this.state.colomn + 1; j++){\n                coords.push({x: this.gridX(j),y: this.gridY(i)});       \n            }\n        }\n        return coords\n    }\n\n    lineVerticalCoords = () => {\n        var coords = [];\n        for (let i = 0; i < this.state.row + 1; i++){\n            for (let j = 0; j < this.state.colomn; j++){\n                coords.push({x0: this.gridX(j), y0: this.gridY(i), x1: this.gridX(j) + this.state.marginWidth, y1: this.gridY(i)});       \n            }\n        }\n        return coords\n    }\n\n    lineHorisontalCoords = () => {\n        var coords = [];\n        for (let i = 0; i < this.state.row ; i++){\n            for (let j = 0; j < this.state.colomn +1; j++){\n                coords.push({x0: this.gridX(j), y0: this.gridY(i), x1: this.gridX(j), y1: this.gridY(i) + this.state.marginHeight});       \n            }\n        }\n        return coords\n    }\n\n    gridX = (i) => this.state.marginWidth * (i + 1) \n\n    gridY = (j) => this.state.marginHeight  * (j + 1)\n\n\n    \n    \n    \n    handleClick = () => {\n        this.setState({\n          color: Konva.Util.getRandomColor()\n        });\n    }\n\n    handleMouseMove = () => {\n        this.setState({\n            colorLine: 'yellow'\n        })\n    }\n\n    drawLine = (x0, y0, x1, y1, index) =>{\n        return(\n            <Line\n                key = {index}\n                points ={[x1, y1, x0, y0]}\n                tension ={-0.5}\n                stroke = {this.state.colorLine}\n                shadowBlur ={2}\n                strokeWidth ={8}\n                \n            />\n        )\n    }\n    \n    render(){   \n        const border = 5;\n        const shadow = 5;\n        // this.newGame();\n        const circles = this.circleGridCoords().map((el,index)=>{\n            return <Circle key={index} x={el.x} y={el.y} radius={10} fill=\"red\" />\n        })\n        // const lines = this.drawLine(20,20,100,20)\n        const linesVertical = this.lineVerticalCoords().map((el,index)=>{\n            return this.drawLine(el.x0, el.y0, el.x1, el.y1, index)\n        })\n\n        const linesHorisontal = this.lineHorisontalCoords().map((el,index)=>{\n            return this.drawLine(el.x0, el.y0, el.x1, el.y1, index)\n        })\n\n        console.log(linesHorisontal);\n        console.log(linesVertical);\n\n\n        return(\n            <div>\n                 \n                <Stage onMouseMove={this.highlightSide} width={WIDTH+border*2+shadow} height={HEIGHT+border*2+shadow}>\n                    <Layer ref= 'layer'> \n                        <Rect\n                            x={border}\n                            y={border}\n                            width={WIDTH+border}\n                            height={HEIGHT+border}\n                            fill={this.state.colorBody}\n                            shadowBlur={shadow}\n                            stroke={'black'} \n                            strokeWidth={border}\n                            // onClick={this.handleClick}\n                        >  \n                        </Rect>\n                        {linesVertical}\n                        {linesHorisontal}\n                        {circles}\n\n                        \n                    </Layer>\n                </Stage> \n            </div>\n        )\n    }\n}\n\n\n\n\n\n\n\n\n\n// boxes = []\n    // newGame = () => {\n    //     this.playersTurn = Math.random() >= 0.5;\n\n        \n    //     for (let i = 0; i < this.state.row; i++ ){\n    //         this.boxes[i] = []\n    //         for(let j = 0; j < this.state.colomn; j++){\n    //             this.boxes[i][j] = new Box(this.gridX(j), this.gridY(i), this.state.marginWidth, this.state.marginHeight);\n    //         }\n    //     }\n    // }\n\n    // drawBoxes = () => {\n    //     for (let row of this.boxes){\n    //         for(let box of row){\n    //             box.drawSides();\n    //             box.drawFill();\n    //         }\n    //     }\n    // }\n\n    // highlightSide = (x, y) => {\n\n    //     // clear previous highlighting\n    //     for (let row of this.boxes) {\n    //         for (let square of row) {\n    //             square.highlight = null;\n    //         }\n    //     }\n\n    //     // check each cell\n    //     let rows = this.boxes.length;\n    //     let cols = this.boxes[0].length;\n    //     var currentCells = [];\n    //     OUTER: for (let i = 0; i < rows; i++) {\n    //         for (let j = 0; j < cols; j++) {\n    //             if (this.boxes[i][j].contains(x, y)) {\n\n    //                 // highlight current\n    //                 let side = this.boxes[i][j].highlightSide(x, y);\n    //                 if (side != null) {\n    //                     currentCells.push({row: i, col: j});\n    //                 }\n\n    //                 // determine neighbour\n    //                 let row = i, col = j, highlight, neighbour = true;\n    //                 if (side == Side.LEFT && j > 0) {\n    //                     col = j - 1;\n    //                     highlight = Side.RIGHT;\n    //                 } else if (side == Side.RIGHT && j < cols - 1) {\n    //                     col = j + 1;\n    //                     highlight = Side.LEFT;\n    //                 } else if (side == Side.TOP && i > 0) {\n    //                     row = i - 1;\n    //                     highlight = Side.BOT;\n    //                 } else if (side == Side.BOT && i < rows - 1) {\n    //                     row = i + 1;\n    //                     highlight = Side.TOP;\n    //                 } else {\n    //                     neighbour = false;\n    //                 }\n\n    //                 // highlight neighbour\n    //                 if (neighbour) {\n    //                     this.boxes[row][col].highlight = highlight;\n    //                     currentCells.push({row: row, col: col});\n    //                 }\n\n    //                 // no need to continue\n    //                 break OUTER;\n    //             }\n    //         }\n    //     }\n    // }"]},"metadata":{},"sourceType":"module"}