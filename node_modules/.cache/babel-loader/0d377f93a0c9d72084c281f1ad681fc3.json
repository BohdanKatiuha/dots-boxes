{"ast":null,"code":"import _createClass from \"/home/simple/dots-boxes/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/simple/dots-boxes/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/simple/dots-boxes/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/simple/dots-boxes/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _classCallCheck from \"/home/simple/dots-boxes/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nvar _jsxFileName = \"/home/simple/dots-boxes/src/components/BoxCanvas.js\";\nimport React, { Component } from 'react';\nimport { WIDTH, HEIGHT } from './constants';\nimport { Stage, Layer, Rect, Circle, Line } from 'react-konva';\nimport Konva from 'konva';\nvar Side = {\n  BOT: 0,\n  LEFT: 1,\n  RIGHT: 2,\n  TOP: 3\n};\n\nvar Box = function Box(x, y, w, h) {\n  _classCallCheck(this, Box);\n\n  this.w = w;\n  this.y = y;\n  this.left = x;\n  this.top = y;\n  this.right = x + w;\n  this.bottom = y + h;\n  this.highlight = null;\n  this.sideBot = {\n    owner: null,\n    selected: false\n  };\n  this.sideLeft = {\n    owner: null,\n    selected: false\n  };\n  this.sideRight = {\n    owner: null,\n    selected: false\n  };\n  this.sideTop = {\n    owner: null,\n    selected: false\n  };\n\n  this.contains = function (x, y) {\n    return x >= this.left && x < this.right && y >= this.top && y < this.bottom;\n  };\n\n  this.drawFill = function () {};\n\n  this.drawSide = function (side, color) {\n    switch (side) {\n      case Side.BOT:\n        this.drawLine(this.left, this.bottom, this.right, this.bottom, color);\n        break;\n\n      case Side.LEFT:\n        this.drawLine(this.left, this.top, this.left, this.bottom, color);\n        break;\n\n      case Side.RIGHT:\n        this.drawLine(this.right, this.top, this.right, this.bottom, color);\n        break;\n\n      case Side.TOP:\n        this.drawLine(this.left, this.top, this.right, this.top, color);\n        break;\n    }\n  };\n\n  this.drawSides = function () {\n    if (this.highlight != null) {\n      this.drawSide(this.highlight, 'blue');\n    }\n  };\n\n  this.highlightSide = function (x, y) {\n    var dBot = this.bottom - y;\n    var dLeft = x - this.left;\n    var dRight = this.right - x;\n    var dTop = this.top;\n    var dClosest = Math.min(dBot, dLeft, dRight, dTop);\n\n    if (dClosest == dBot && !this.sideBot.selected) {\n      this.highlight = Side.BOT;\n    } else if (dClosest == dLeft && !this.sideLeft.selected) {\n      this.highlight = Side.LEFT;\n    } else if (dClosest == dRight && !this.sideRight.selected) {\n      this.highlight = Side.RIGHT;\n    } else if (dClosest == dTop && !this.sideTop.selected) {\n      this.highlight = Side.TOP;\n    }\n\n    return this.highlight;\n  };\n};\n\nvar BoxCanvas =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(BoxCanvas, _Component);\n\n  function BoxCanvas() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, BoxCanvas);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(BoxCanvas)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      color: 'grey',\n      row: 4,\n      colomn: 6,\n      marginWidth: 0,\n      marginHeight: 0\n    };\n    _this.playersTurn = 0;\n\n    _this.drawLine = function (x0, y0, x1, y1) {\n      var line = new Konva.Line({\n        x: 100,\n        y: 50,\n        points: [x0, y0, x1, y1],\n        stroke: 'blue',\n        tension: 1\n      });\n\n      _this.refs.layer.add(line);\n    };\n\n    _this.drawCircleGrid = function () {\n      var coords = [];\n\n      for (var i = 0; i < _this.state.row + 1; i++) {\n        for (var j = 0; j < _this.state.colomn + 1; j++) {\n          coords.push({\n            x: _this.gridX(j),\n            y: _this.gridY(i)\n          });\n        }\n      }\n\n      return coords;\n    };\n\n    _this.gridX = function (i) {\n      return _this.state.marginWidth * (i + 1);\n    };\n\n    _this.gridY = function (j) {\n      return _this.state.marginHeight * (j + 1);\n    };\n\n    _this.handleClick = function () {\n      _this.setState({\n        color: Konva.Util.getRandomColor()\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(BoxCanvas, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      this.setState({\n        marginWidth: WIDTH / (this.state.colomn + 2),\n        marginHeight: HEIGHT / (this.state.row + 2)\n      });\n      this.drawLine(100, 100, 200, 200);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var border = 5;\n      var shadow = 5; // this.newGame();\n\n      var circles = this.drawCircleGrid().map(function (el, index) {\n        return React.createElement(Circle, {\n          key: index,\n          x: el.x,\n          y: el.y,\n          radius: 10,\n          fill: \"red\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 216\n          },\n          __self: this\n        });\n      }); // const lines = this.drawCircleGrid().map((el,index)=>{\n      //     return <Line key={index} x={el.x} y={el.y} points = {[el.x+100, el.y+100, el.x+100, el.y+100]} fill=\"blue\" tension = {3} />\n      // })\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 224\n        },\n        __self: this\n      }, React.createElement(Stage, {\n        onMouseMove: this.highlightSide,\n        width: WIDTH + border * 2 + shadow,\n        height: HEIGHT + border * 2 + shadow,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 226\n        },\n        __self: this\n      }, React.createElement(Layer, {\n        ref: \"layer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 227\n        },\n        __self: this\n      }, React.createElement(Rect, {\n        x: border,\n        y: border,\n        width: WIDTH + border,\n        height: HEIGHT + border,\n        fill: this.state.color,\n        shadowBlur: shadow,\n        stroke: 'black',\n        strokeWidth: border // onClick={this.handleClick}\n        ,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 228\n        },\n        __self: this\n      }), circles)));\n    }\n  }]);\n\n  return BoxCanvas;\n}(Component);\n\nexport { BoxCanvas as default };","map":{"version":3,"sources":["/home/simple/dots-boxes/src/components/BoxCanvas.js"],"names":["React","Component","WIDTH","HEIGHT","Stage","Layer","Rect","Circle","Line","Konva","Side","BOT","LEFT","RIGHT","TOP","Box","x","y","w","h","left","top","right","bottom","highlight","sideBot","owner","selected","sideLeft","sideRight","sideTop","contains","drawFill","drawSide","side","color","drawLine","drawSides","highlightSide","dBot","dLeft","dRight","dTop","dClosest","Math","min","BoxCanvas","state","row","colomn","marginWidth","marginHeight","playersTurn","x0","y0","x1","y1","line","points","stroke","tension","refs","layer","add","drawCircleGrid","coords","i","j","push","gridX","gridY","handleClick","setState","Util","getRandomColor","border","shadow","circles","map","el","index"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport {WIDTH, HEIGHT} from './constants'\nimport { Stage, Layer, Rect, Circle, Line } from 'react-konva';\nimport Konva from 'konva';\n\nconst Side = {\n    BOT: 0,\n    LEFT: 1,\n    RIGHT: 2,\n    TOP: 3\n}\n\nclass Box{\n    constructor(x, y, w, h){\n        this.w = w;\n        this.y = y;\n        this.left = x;\n        this.top = y;\n        this.right = x + w;\n        this.bottom = y + h;\n\n        this.highlight = null;\n        this.sideBot = {owner: null, selected: false };\n        this.sideLeft = {owner: null, selected: false };\n        this.sideRight = {owner: null, selected: false };\n        this.sideTop = {owner: null, selected: false };\n        \n        this.contains = function(x, y){\n            return x >= this.left && x < this.right && y >= this.top && y < this.bottom;\n        }\n\n        this.drawFill = function(){}\n\n        this.drawSide = function(side, color){\n            switch (side) {\n                case Side.BOT:\n                    this.drawLine(this.left, this.bottom, this.right, this.bottom, color);\n                    break;\n                case Side.LEFT:\n                    this.drawLine(this.left, this.top, this.left, this.bottom, color);\n                    break; \n                case Side.RIGHT:\n                    this.drawLine(this.right, this.top, this.right, this.bottom, color);\n                    break; \n                case Side.TOP:\n                    this.drawLine(this.left, this.top, this.right, this.top, color);\n                    break;  \n            }\n        }\n\n        this.drawSides = function(){\n            if (this.highlight != null){\n                this.drawSide(this.highlight, 'blue')\n            }\n        }\n\n        this.highlightSide = function(x, y){\n\n            let dBot = this.bottom - y;\n            let dLeft = x - this.left;\n            let dRight = this.right - x;\n            let dTop = this.top;\n\n            let dClosest = Math.min(dBot, dLeft, dRight, dTop);\n\n            if( dClosest == dBot && !this.sideBot.selected){\n                this.highlight = Side.BOT;\n            }else if( dClosest == dLeft && !this.sideLeft.selected){\n                this.highlight = Side.LEFT;\n            }else if( dClosest == dRight && !this.sideRight.selected){\n                this.highlight = Side.RIGHT;\n            }else if( dClosest == dTop && !this.sideTop.selected){\n                this.highlight = Side.TOP;\n            }\n\n            return this.highlight\n        }\n    }       \n}\n\nexport default class BoxCanvas extends Component{\n    \n    state = {\n        color: 'grey',\n        row: 4,\n        colomn: 6,\n        marginWidth: 0,\n        marginHeight: 0\n    };\n\n    playersTurn = 0;\n\n    \n    drawLine = (x0, y0, x1, y1) => {\n        var line = new Konva.Line({\n            x: 100,\n            y: 50,\n            points: [x0, y0, x1, y1],\n            stroke: 'blue',\n            tension: 1\n          });\n         this.refs.layer.add(line)\n    }\n\n    componentWillMount(){\n        this.setState({\n            marginWidth: WIDTH / (this.state.colomn + 2),\n            marginHeight: HEIGHT / (this.state.row + 2)\n        })\n        this.drawLine(100,100, 200,200)\n    }\n    \n    drawCircleGrid = () => {\n        var coords = [];\n        for (let i = 0; i < this.state.row + 1; i++){\n            for (let j = 0; j < this.state.colomn + 1; j++){\n                coords.push({x: this.gridX(j),y: this.gridY(i)});       \n            }\n        }\n        return coords\n    }\n\n    gridX = (i) => this.state.marginWidth * (i + 1) \n\n    gridY = (j) => this.state.marginHeight  * (j + 1)\n\n\n    // boxes = []\n    // newGame = () => {\n    //     this.playersTurn = Math.random() >= 0.5;\n\n        \n    //     for (let i = 0; i < this.state.row; i++ ){\n    //         this.boxes[i] = []\n    //         for(let j = 0; j < this.state.colomn; j++){\n    //             this.boxes[i][j] = new Box(this.gridX(j), this.gridY(i), this.state.marginWidth, this.state.marginHeight);\n    //         }\n    //     }\n    // }\n\n    // drawBoxes = () => {\n    //     for (let row of this.boxes){\n    //         for(let box of row){\n    //             box.drawSides();\n    //             box.drawFill();\n    //         }\n    //     }\n    // }\n\n    // highlightSide = (x, y) => {\n\n    //     // clear previous highlighting\n    //     for (let row of this.boxes) {\n    //         for (let square of row) {\n    //             square.highlight = null;\n    //         }\n    //     }\n\n    //     // check each cell\n    //     let rows = this.boxes.length;\n    //     let cols = this.boxes[0].length;\n    //     var currentCells = [];\n    //     OUTER: for (let i = 0; i < rows; i++) {\n    //         for (let j = 0; j < cols; j++) {\n    //             if (this.boxes[i][j].contains(x, y)) {\n\n    //                 // highlight current\n    //                 let side = this.boxes[i][j].highlightSide(x, y);\n    //                 if (side != null) {\n    //                     currentCells.push({row: i, col: j});\n    //                 }\n\n    //                 // determine neighbour\n    //                 let row = i, col = j, highlight, neighbour = true;\n    //                 if (side == Side.LEFT && j > 0) {\n    //                     col = j - 1;\n    //                     highlight = Side.RIGHT;\n    //                 } else if (side == Side.RIGHT && j < cols - 1) {\n    //                     col = j + 1;\n    //                     highlight = Side.LEFT;\n    //                 } else if (side == Side.TOP && i > 0) {\n    //                     row = i - 1;\n    //                     highlight = Side.BOT;\n    //                 } else if (side == Side.BOT && i < rows - 1) {\n    //                     row = i + 1;\n    //                     highlight = Side.TOP;\n    //                 } else {\n    //                     neighbour = false;\n    //                 }\n\n    //                 // highlight neighbour\n    //                 if (neighbour) {\n    //                     this.boxes[row][col].highlight = highlight;\n    //                     currentCells.push({row: row, col: col});\n    //                 }\n\n    //                 // no need to continue\n    //                 break OUTER;\n    //             }\n    //         }\n    //     }\n    // }\n    \n    \n    handleClick = () => {\n        this.setState({\n          color: Konva.Util.getRandomColor()\n        });\n    }\n    \n    render(){   \n        const border = 5;\n        const shadow = 5;\n        // this.newGame();\n        const circles = this.drawCircleGrid().map((el,index)=>{\n            return <Circle key={index} x={el.x} y={el.y} radius={10} fill=\"red\" />\n        })\n        \n        // const lines = this.drawCircleGrid().map((el,index)=>{\n        //     return <Line key={index} x={el.x} y={el.y} points = {[el.x+100, el.y+100, el.x+100, el.y+100]} fill=\"blue\" tension = {3} />\n        // })\n\n        return(\n            <div>\n                 \n                <Stage onMouseMove={this.highlightSide} width={WIDTH+border*2+shadow} height={HEIGHT+border*2+shadow}>\n                    <Layer ref= 'layer'> \n                        <Rect\n                            x={border}\n                            y={border}\n                            width={WIDTH+border}\n                            height={HEIGHT+border}\n                            fill={this.state.color}\n                            shadowBlur={shadow}\n                            stroke={'black'} \n                            strokeWidth={border}\n                            // onClick={this.handleClick}\n                        >  \n                        </Rect>\n                        \n                        {circles}\n\n                        {/* {lines} */}\n                    </Layer>\n                </Stage> \n            </div>\n        )\n    }\n}"]},"metadata":{},"sourceType":"module"}