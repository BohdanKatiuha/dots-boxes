{"ast":null,"code":"import _classCallCheck from \"/home/simple/dots-boxes/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/simple/dots-boxes/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/simple/dots-boxes/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/simple/dots-boxes/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/simple/dots-boxes/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/simple/dots-boxes/src/components/BodyCanvas.js\";\nimport React, { Component } from 'react';\nimport { WIDTH, HEIGHT } from './constants';\nimport { Stage, Layer, Rect, Circle } from 'react-konva';\nimport Konva from 'konva';\nimport SideLine from './SideLine';\nimport Box from './Box';\n\nvar BoxCanvas =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(BoxCanvas, _Component);\n\n  function BoxCanvas() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, BoxCanvas);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(BoxCanvas)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      colorBody: 'grey',\n      colorLine: 'brown',\n      colorBoxes: 'violet',\n      row: 5,\n      colomn: 6,\n      marginWidth: 0,\n      marginHeight: 0,\n      coordsBoxes: [],\n      course: ''\n    };\n\n    _this.circleGridCoords = function () {\n      var coords = [];\n\n      for (var i = 0; i < _this.state.row + 1; i++) {\n        for (var j = 0; j < _this.state.colomn + 1; j++) {\n          coords.push({\n            x: _this.gridX(j),\n            y: _this.gridY(i)\n          });\n        }\n      }\n\n      return coords;\n    };\n\n    _this.lineVerticalCoords = function () {\n      var coords = [];\n\n      for (var i = 0; i < _this.state.row + 1; i++) {\n        for (var j = 0; j < _this.state.colomn; j++) {\n          coords.push({\n            x0: _this.gridX(j),\n            y0: _this.gridY(i),\n            x1: _this.gridX(j) + _this.state.marginWidth,\n            y1: _this.gridY(i)\n          });\n        }\n      }\n\n      return coords;\n    };\n\n    _this.lineHorisontalCoords = function () {\n      var coords = [];\n\n      for (var i = 0; i < _this.state.row; i++) {\n        for (var j = 0; j < _this.state.colomn + 1; j++) {\n          coords.push({\n            x0: _this.gridX(j),\n            y0: _this.gridY(i),\n            x1: _this.gridX(j),\n            y1: _this.gridY(i) + _this.state.marginHeight\n          });\n        }\n      }\n\n      return coords;\n    };\n\n    _this.boxesCoords = function () {\n      var coords = [];\n\n      for (var i = 0; i < _this.state.row; i++) {\n        for (var j = 0; j < _this.state.colomn; j++) {\n          coords.push({\n            left: _this.gridX(j),\n            top: _this.gridY(i),\n            right: _this.gridX(j) + _this.state.marginWidth,\n            bottom: _this.gridY(i) + _this.state.marginHeight,\n            sides: {\n              left: false,\n              top: false,\n              right: false,\n              bottom: false\n            },\n            color: _this.state.colorBoxes\n          });\n        }\n      }\n\n      _this.setState({\n        coordsBoxes: coords\n      });\n    };\n\n    _this.gridX = function (i) {\n      return _this.state.marginWidth * (i + 1);\n    };\n\n    _this.gridY = function (j) {\n      return _this.state.marginHeight * (j + 1);\n    };\n\n    _this.handleClickLine = function (el) {\n      var fl = false;\n\n      var coords = _this.state.coordsBoxes.map(function (boxCoords) {\n        if (el[0] === boxCoords.left && el[1] === boxCoords.top && el[2] === boxCoords.left && el[3] === boxCoords.bottom) {\n          boxCoords.sides.left = true;\n        } else if (el[0] === boxCoords.left && el[1] === boxCoords.top && el[2] === boxCoords.right && el[3] === boxCoords.top) {\n          boxCoords.sides.top = true;\n        } else if (el[0] === boxCoords.right && el[1] === boxCoords.top && el[2] === boxCoords.right && el[3] === boxCoords.bottom) {\n          boxCoords.sides.right = true;\n        } else if (el[0] === boxCoords.left && el[1].toFixed(5) === boxCoords.bottom.toFixed(5) && el[2] === boxCoords.right && el[3].toFixed(5) === boxCoords.bottom.toFixed(5)) {\n          boxCoords.sides.bottom = true;\n        }\n\n        if (boxCoords.sides.top && boxCoords.sides.left && boxCoords.sides.right && boxCoords.sides.bottom) {\n          boxCoords.color = 'white';\n          fl = true; // this.setState({coordsBox: coords, course: !this.state.course })\n        }\n      });\n\n      _this.setState({\n        coordsBox: coords,\n        course: fl ? !_this.state.course : _this.state.course\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(BoxCanvas, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      this.setState({\n        marginWidth: WIDTH / (this.state.colomn + 2),\n        marginHeight: HEIGHT / (this.state.row + 2),\n        course: (Math.random() > 0, 5) ? false : true\n      });\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.boxesCoords();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var border = 5;\n      var shadow = 5; // this.newGame();\n\n      var circles = this.circleGridCoords().map(function (el, index) {\n        return React.createElement(Circle, {\n          key: index,\n          x: el.x,\n          y: el.y,\n          radius: 10,\n          fill: \"red\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 133\n          },\n          __self: this\n        });\n      }); // const lines = this.drawLine(20,20,100,20)\n\n      var linesVertical = this.lineVerticalCoords().map(function (el, index) {\n        return (// this.drawLine(el.x0, el.y0, el.x1, el.y1, index)\n          React.createElement(SideLine, {\n            key: index,\n            x0: el.x0,\n            y0: el.y0,\n            x1: el.x1,\n            y1: el.y1,\n            index: index + 1,\n            color: _this2.state.colorLine,\n            onClick: _this2.handleClickLine,\n            course: _this2.state.course,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 139\n            },\n            __self: this\n          })\n        );\n      });\n      var linesHorisontal = this.lineHorisontalCoords().map(function (el, index) {\n        return (// this.drawLine(el.x0, el.y0, el.x1, el.y1, index)\n          React.createElement(SideLine, {\n            key: index,\n            x0: el.x0,\n            y0: el.y0,\n            x1: el.x1,\n            y1: el.y1,\n            index: new Date(),\n            color: _this2.state.colorLine,\n            onClick: _this2.handleClickLine,\n            course: _this2.state.course,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 156\n            },\n            __self: this\n          })\n        );\n      });\n      console.log(this.state.coordsBoxes);\n      var boxes = this.state.coordsBoxes.map(function (el, index) {\n        return React.createElement(Box, {\n          key: index,\n          left: el.left,\n          top: el.top,\n          right: el.right,\n          bottom: el.bottom,\n          color: el.color,\n          leftSide: el.sides.left,\n          topSide: el.sides.top,\n          rightSide: el.sides.right,\n          bottomSide: el.sides.bottom,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 172\n          },\n          __self: this\n        });\n      });\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 188\n        },\n        __self: this\n      }, React.createElement(Stage, {\n        onMouseMove: this.highlightSide,\n        width: WIDTH + border * 2 + shadow,\n        height: HEIGHT + border * 2 + shadow,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 190\n        },\n        __self: this\n      }, React.createElement(Layer, {\n        ref: \"layer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 191\n        },\n        __self: this\n      }, React.createElement(Rect, {\n        x: border,\n        y: border,\n        width: WIDTH + border,\n        height: HEIGHT + border,\n        fill: this.state.colorBody // shadowBlur={shadow}\n        ,\n        stroke: 'black',\n        strokeWidth: border // onClick={this.handleClick}\n        ,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 192\n        },\n        __self: this\n      }), boxes, linesVertical, linesHorisontal, circles)));\n    }\n  }]);\n\n  return BoxCanvas;\n}(Component);\n\nexport { BoxCanvas as default };","map":{"version":3,"sources":["/home/simple/dots-boxes/src/components/BodyCanvas.js"],"names":["React","Component","WIDTH","HEIGHT","Stage","Layer","Rect","Circle","Konva","SideLine","Box","BoxCanvas","state","colorBody","colorLine","colorBoxes","row","colomn","marginWidth","marginHeight","coordsBoxes","course","circleGridCoords","coords","i","j","push","x","gridX","y","gridY","lineVerticalCoords","x0","y0","x1","y1","lineHorisontalCoords","boxesCoords","left","top","right","bottom","sides","color","setState","handleClickLine","el","fl","map","boxCoords","toFixed","coordsBox","Math","random","border","shadow","circles","index","linesVertical","linesHorisontal","Date","console","log","boxes","highlightSide"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport {WIDTH, HEIGHT} from './constants'\nimport { Stage, Layer, Rect, Circle } from 'react-konva';\nimport Konva from 'konva';\nimport SideLine from './SideLine'\nimport Box from './Box'\n\n\nexport default class BoxCanvas extends Component{\n    \n    state = {\n        colorBody: 'grey',\n        colorLine: 'brown',\n        colorBoxes: 'violet',\n        row: 5,\n        colomn: 6,\n        marginWidth: 0,\n        marginHeight: 0,\n        coordsBoxes: [],\n        course: ''\n    };\n\n    componentWillMount(){ \n        this.setState({\n            marginWidth: WIDTH / (this.state.colomn + 2),\n            marginHeight: HEIGHT / (this.state.row + 2),\n            course: (Math.random() >0,5) ? false : true\n        })\n        \n    } \n\n    componentDidMount(){\n        this.boxesCoords()\n    }\n    \n    circleGridCoords = () => {\n        var coords = [];\n        for (let i = 0; i < this.state.row + 1; i++){\n            for (let j = 0; j < this.state.colomn + 1; j++){\n                coords.push({x: this.gridX(j),y: this.gridY(i)});       \n            }\n        }\n        return coords\n    }\n\n    lineVerticalCoords = () => {\n        var coords = [];\n        for (let i = 0; i < this.state.row + 1; i++){\n            for (let j = 0; j < this.state.colomn; j++){\n                coords.push({\n                    x0: this.gridX(j), \n                    y0: this.gridY(i), \n                    x1: this.gridX(j) + this.state.marginWidth, \n                    y1: this.gridY(i)}\n                );       \n            }\n        }\n        return coords\n    }\n\n    lineHorisontalCoords = () => {\n        var coords = [];\n        for (let i = 0; i < this.state.row ; i++){\n            for (let j = 0; j < this.state.colomn +1; j++){\n                coords.push({\n                    x0: this.gridX(j), \n                    y0: this.gridY(i), \n                    x1: this.gridX(j), \n                    y1: this.gridY(i) + this.state.marginHeight}\n                );       \n            }\n        }\n        return coords\n    }\n\n    \n    boxesCoords = () => {\n        var coords = []\n        for (let i = 0; i < this.state.row ; i++){\n            for (let j = 0; j < this.state.colomn; j++){\n                 coords.push({\n                        left: this.gridX(j), \n                        top: this.gridY(i), \n                        right: this.gridX(j) + this.state.marginWidth, \n                        bottom: this.gridY(i) + this.state.marginHeight,\n                        sides: {left: false, top: false, right: false, bottom: false},\n                        color: this.state.colorBoxes\n                    })\n                      \n            }\n        }\n\n        this.setState({coordsBoxes: coords})\n    }\n\n    gridX = (i) => this.state.marginWidth * (i + 1) \n\n    gridY = (j) => this.state.marginHeight  * (j + 1)\n\n\n    handleClickLine = (el) => {\n        let fl = false\n        const coords = this.state.coordsBoxes.map(boxCoords =>{\n            \n            if( el[0] === boxCoords.left && el[1] === boxCoords.top && el[2] === boxCoords.left && el[3]  === boxCoords.bottom ){\n                boxCoords.sides.left = true\n            } else if(el[0] === boxCoords.left && el[1] === boxCoords.top && el[2]  === boxCoords.right && el[3]  === boxCoords.top){\n                boxCoords.sides.top = true\n            } else if(el[0] === boxCoords.right && el[1] === boxCoords.top && el[2]  === boxCoords.right && el[3]  === boxCoords.bottom ){\n                boxCoords.sides.right = true\n            } else if(el[0] === boxCoords.left && el[1].toFixed(5)  === boxCoords.bottom.toFixed(5) && el[2]  === boxCoords.right && el[3].toFixed(5) === boxCoords.bottom.toFixed(5) ){\n                boxCoords.sides.bottom = true\n            }\n            if (boxCoords.sides.top && boxCoords.sides.left && boxCoords.sides.right && boxCoords.sides.bottom){ \n                boxCoords.color = 'white'\n                fl = true\n                // this.setState({coordsBox: coords, course: !this.state.course })\n                \n            }\n        })\n        \n       \n        this.setState({coordsBox: coords, course: fl ? !this.state.course : this.state.course })\n        \n        \n    }\n    \n    render(){   \n        const border = 5;\n        const shadow = 5;\n        // this.newGame();\n        const circles = this.circleGridCoords().map((el,index)=>{\n            return <Circle key={index} x={el.x} y={el.y} radius={10} fill=\"red\" />\n        })\n        // const lines = this.drawLine(20,20,100,20)\n        const linesVertical = this.lineVerticalCoords().map((el,index)=>{\n            return (\n                // this.drawLine(el.x0, el.y0, el.x1, el.y1, index)\n                <SideLine\n                    key = {index}  \n                    x0 ={el.x0}\n                    y0 = {el.y0}\n                    x1 = {el.x1} \n                    y1 = {el.y1}\n                    index = {index+1}\n                    color = {this.state.colorLine}\n                    onClick = {this.handleClickLine}\n                    course = {this.state.course}\n                />\n            )\n        })\n\n        const linesHorisontal = this.lineHorisontalCoords().map((el,index)=>{\n            return (\n                // this.drawLine(el.x0, el.y0, el.x1, el.y1, index)\n                <SideLine\n                    key = {index} \n                    x0 ={el.x0}\n                    y0 = {el.y0}\n                    x1 = {el.x1} \n                    y1 = {el.y1}\n                    index = {new Date()}\n                    color = {this.state.colorLine}\n                    onClick = {this.handleClickLine}\n                    course = {this.state.course}\n                />\n            )\n        })\n        console.log(this.state.coordsBoxes)\n        const boxes = this.state.coordsBoxes.map((el, index) =>{\n            return (\n                <Box\n                    key = {index}\n                    left={el.left}\n                    top={el.top}\n                    right={el.right}\n                    bottom={el.bottom}\n                    color={el.color}\n                    leftSide = {el.sides.left}\n                    topSide = {el.sides.top}\n                    rightSide = {el.sides.right}\n                    bottomSide = {el.sides.bottom}\n                />  \n            )\n        })\n       \n        return(\n            <div>\n                 \n                <Stage onMouseMove={this.highlightSide} width={WIDTH+border*2+shadow} height={HEIGHT+border*2+shadow}>\n                    <Layer ref= 'layer'> \n                        <Rect\n                            x={border}\n                            y={border}\n                            width={WIDTH+border}\n                            height={HEIGHT+border}\n                            fill={this.state.colorBody}\n                           // shadowBlur={shadow}\n                            stroke={'black'} \n                            strokeWidth={border}\n                            \n                            // onClick={this.handleClick}\n                        />  \n                        {boxes}\n                        {linesVertical}\n                        {linesHorisontal}\n                        {circles}\n  \n                    </Layer>\n                </Stage> \n            </div>\n        )\n    }\n}\n"]},"metadata":{},"sourceType":"module"}