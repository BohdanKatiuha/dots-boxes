{"ast":null,"code":"import _classCallCheck from \"/home/simple/dots-boxes/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/simple/dots-boxes/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/simple/dots-boxes/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/simple/dots-boxes/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/simple/dots-boxes/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/simple/dots-boxes/src/components/BoxCanvas.js\";\nimport React, { Component } from 'react';\nimport { WIDTH, HEIGHT } from './constants';\nimport { Stage, Layer, Rect, Circle } from 'react-konva';\nimport Konva from 'konva';\n\nvar BoxCanvas =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(BoxCanvas, _Component);\n\n  function BoxCanvas() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, BoxCanvas);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(BoxCanvas)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      color: 'grey',\n      row: 4,\n      colomn: 6,\n      marginWidth: 0,\n      marginHeight: 0\n    };\n\n    _this.drawCircleGrid = function () {\n      var children = [];\n\n      for (var i = 0; i < _this.state.row + 1; i++) {\n        for (var j = 0; j < _this.state.colomn + 1; j++) {\n          children.push({\n            x: _this.gridX(j),\n            y: _this.gridY(i)\n          });\n        }\n      }\n\n      return children;\n    };\n\n    _this.gridX = function (i) {\n      return _this.state.marginWidth * (i + 1);\n    };\n\n    _this.gridY = function (j) {\n      return _this.state.marginHeight * (j + 1);\n    };\n\n    _this.handleClick = function () {\n      _this.setState({\n        color: Konva.Util.getRandomColor()\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(BoxCanvas, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      this.setState({\n        marginWidth: WIDTH / (this.state.colomn + 2),\n        marginHeight: HEIGHT / (this.state.row + 2)\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var border = 5;\n      var shadow = 5;\n      var circles = this.drawCircleGrid().map(function (el, index) {\n        return React.createElement(Circle, {\n          key: index,\n          x: el.x,\n          y: el.y,\n          radius: 10,\n          fill: \"red\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 53\n          },\n          __self: this\n        });\n      });\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      }, React.createElement(Stage, {\n        width: WIDTH + border * 2 + shadow,\n        height: HEIGHT + border * 2 + shadow,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }, React.createElement(Layer, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }, React.createElement(Rect, {\n        x: border,\n        y: border,\n        width: WIDTH + border,\n        height: HEIGHT + border,\n        fill: this.state.color,\n        shadowBlur: shadow,\n        stroke: 'black',\n        strokeWidth: border,\n        onClick: this.handleClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }), circles)));\n    }\n  }]);\n\n  return BoxCanvas;\n}(Component);\n\nexport { BoxCanvas as default };","map":{"version":3,"sources":["/home/simple/dots-boxes/src/components/BoxCanvas.js"],"names":["React","Component","WIDTH","HEIGHT","Stage","Layer","Rect","Circle","Konva","BoxCanvas","state","color","row","colomn","marginWidth","marginHeight","drawCircleGrid","children","i","j","push","x","gridX","y","gridY","handleClick","setState","Util","getRandomColor","border","shadow","circles","map","el","index"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport {WIDTH, HEIGHT} from './constants'\nimport { Stage, Layer, Rect, Circle } from 'react-konva';\nimport Konva from 'konva';\n\nexport default class BoxCanvas extends Component{\n    \n    state = {\n        color: 'grey',\n        row: 4,\n        colomn: 6,\n        marginWidth: 0,\n        marginHeight: 0\n    };\n\n    componentWillMount(){\n        this.setState({\n            marginWidth: WIDTH / (this.state.colomn + 2),\n            marginHeight: HEIGHT / (this.state.row + 2)\n        })\n    }\n    \n    drawCircleGrid = () => {\n        var children = [];\n        for (let i = 0; i < this.state.row + 1; i++){\n            for (let j = 0; j < this.state.colomn + 1; j++){\n                children.push({x: this.gridX(j),y: this.gridY(i)});       \n            }\n        }\n\n        return children\n\n    }\n\n    gridX = (i) => this.state.marginWidth * (i + 1) \n\n    gridY = (j) => this.state.marginHeight  * (j + 1)\n\n    \n\n    \n    handleClick = () => {\n        this.setState({\n          color: Konva.Util.getRandomColor()\n        });\n    }\n    \n    render(){   \n        const border = 5;\n        const shadow = 5;\n\n        const circles = this.drawCircleGrid().map((el,index)=>{\n            return <Circle key={index} x={el.x} y={el.y} radius={10} fill=\"red\" />\n        }) \n\n        return(\n            <div>\n                 \n                <Stage width={WIDTH+border*2+shadow} height={HEIGHT+border*2+shadow}>\n                    <Layer> \n                        <Rect\n                            x={border}\n                            y={border}\n                            width={WIDTH+border}\n                            height={HEIGHT+border}\n                            fill={this.state.color}\n                            shadowBlur={shadow}\n                            stroke={'black'} \n                            strokeWidth={border}\n                            onClick={this.handleClick}\n                        >  \n                        </Rect>\n                        \n                        {circles}\n                        \n                    </Layer>\n                </Stage> \n            </div>\n        )\n    }\n}"]},"metadata":{},"sourceType":"module"}