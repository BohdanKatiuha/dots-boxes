{"ast":null,"code":"import _createClass from \"/home/simple/dots-boxes/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/simple/dots-boxes/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/simple/dots-boxes/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/simple/dots-boxes/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _classCallCheck from \"/home/simple/dots-boxes/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nvar _jsxFileName = \"/home/simple/dots-boxes/src/components/BoxCanvas.js\";\nimport React, { Component } from 'react';\nimport { WIDTH, HEIGHT } from './constants';\nimport { Stage, Layer, Rect, Circle, Line } from 'react-konva';\nimport Konva from 'konva';\nvar Side = {\n  BOT: 0,\n  LEFT: 1,\n  RIGHT: 2,\n  TOP: 3\n};\n\nvar Box = function Box(x, y, w, h) {\n  _classCallCheck(this, Box);\n\n  this.w = w;\n  this.y = y;\n  this.left = x;\n  this.top = y;\n  this.right = x + w;\n  this.bottom = y + h;\n  this.highlight = null;\n  this.sideBot = {\n    owner: null,\n    selected: false\n  };\n  this.sideLeft = {\n    owner: null,\n    selected: false\n  };\n  this.sideRight = {\n    owner: null,\n    selected: false\n  };\n  this.sideTop = {\n    owner: null,\n    selected: false\n  };\n\n  this.contains = function (x, y) {\n    return x >= this.left && x < this.right && y >= this.top && y < this.bottom;\n  };\n\n  this.drawFill = function () {};\n\n  this.drawSide = function (side, color) {\n    switch (side) {\n      case Side.BOT:\n        this.drawLine(this.left, this.bottom, this.right, this.bottom, color);\n        break;\n\n      case Side.LEFT:\n        this.drawLine(this.left, this.top, this.left, this.bottom, color);\n        break;\n\n      case Side.RIGHT:\n        this.drawLine(this.right, this.top, this.right, this.bottom, color);\n        break;\n\n      case Side.TOP:\n        this.drawLine(this.left, this.top, this.right, this.top, color);\n        break;\n    }\n  };\n\n  this.drawSides = function () {\n    if (this.highlight != null) {\n      this.drawSide(this.highlight, 'blue');\n    }\n  };\n\n  this.highlightSide = function (x, y) {\n    var dBot = this.bottom - y;\n    var dLeft = x - this.left;\n    var dRight = this.right - x;\n    var dTop = this.top;\n    var dClosest = Math.min(dBot, dLeft, dRight, dTop);\n\n    if (dClosest == dBot && !this.sideBot.selected) {\n      this.highlight = Side.BOT;\n    } else if (dClosest == dLeft && !this.sideLeft.selected) {\n      this.highlight = Side.LEFT;\n    } else if (dClosest == dRight && !this.sideRight.selected) {\n      this.highlight = Side.RIGHT;\n    } else if (dClosest == dTop && !this.sideTop.selected) {\n      this.highlight = Side.TOP;\n    }\n\n    return this.highlight;\n  };\n};\n\nvar BoxCanvas =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(BoxCanvas, _Component);\n\n  function BoxCanvas() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, BoxCanvas);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(BoxCanvas)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      color: 'grey',\n      row: 4,\n      colomn: 6,\n      marginWidth: 0,\n      marginHeight: 0\n    };\n    _this.playersTurn = 0;\n\n    _this.drawLine = function (x0, y0, x1, y1) {\n      var line = new Konva.Line({\n        x: 100,\n        y: 50,\n        points: [x0, y0, x1, y1],\n        stroke: 'blue',\n        tension: 1\n      });\n      return line;\n    };\n\n    _this.drawCircleGrid = function () {\n      var coords = [];\n\n      for (var i = 0; i < _this.state.row + 1; i++) {\n        for (var j = 0; j < _this.state.colomn + 1; j++) {\n          coords.push({\n            x: _this.gridX(j),\n            y: _this.gridY(i)\n          });\n        }\n      }\n\n      return coords;\n    };\n\n    _this.gridX = function (i) {\n      return _this.state.marginWidth * (i + 1);\n    };\n\n    _this.gridY = function (j) {\n      return _this.state.marginHeight * (j + 1);\n    };\n\n    _this.boxes = [];\n\n    _this.newGame = function () {\n      _this.playersTurn = Math.random() >= 0.5;\n\n      for (var i = 0; i < _this.state.row; i++) {\n        _this.boxes[i] = [];\n\n        for (var j = 0; j < _this.state.colomn; j++) {\n          _this.boxes[i][j] = new Box(_this.gridX(j), _this.gridY(i), _this.state.marginWidth, _this.state.marginHeight);\n        }\n      }\n    };\n\n    _this.drawBoxes = function () {\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = _this.boxes[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var row = _step.value;\n          var _iteratorNormalCompletion2 = true;\n          var _didIteratorError2 = false;\n          var _iteratorError2 = undefined;\n\n          try {\n            for (var _iterator2 = row[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n              var box = _step2.value;\n              box.drawSides();\n              box.drawFill();\n            }\n          } catch (err) {\n            _didIteratorError2 = true;\n            _iteratorError2 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n                _iterator2.return();\n              }\n            } finally {\n              if (_didIteratorError2) {\n                throw _iteratorError2;\n              }\n            }\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n    };\n\n    _this.highlightSide = function (x, y) {\n      // clear previous highlighting\n      var _iteratorNormalCompletion3 = true;\n      var _didIteratorError3 = false;\n      var _iteratorError3 = undefined;\n\n      try {\n        for (var _iterator3 = _this.boxes[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n          var _row = _step3.value;\n          var _iteratorNormalCompletion4 = true;\n          var _didIteratorError4 = false;\n          var _iteratorError4 = undefined;\n\n          try {\n            for (var _iterator4 = _row[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n              var square = _step4.value;\n              square.highlight = null;\n            }\n          } catch (err) {\n            _didIteratorError4 = true;\n            _iteratorError4 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion4 && _iterator4.return != null) {\n                _iterator4.return();\n              }\n            } finally {\n              if (_didIteratorError4) {\n                throw _iteratorError4;\n              }\n            }\n          }\n        } // check each cell\n\n      } catch (err) {\n        _didIteratorError3 = true;\n        _iteratorError3 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n            _iterator3.return();\n          }\n        } finally {\n          if (_didIteratorError3) {\n            throw _iteratorError3;\n          }\n        }\n      }\n\n      var rows = _this.boxes.length;\n      var cols = _this.boxes[0].length;\n      var currentCells = [];\n\n      OUTER: for (var i = 0; i < rows; i++) {\n        for (var j = 0; j < cols; j++) {\n          if (_this.boxes[i][j].contains(x, y)) {\n            // highlight current\n            var side = _this.boxes[i][j].highlightSide(x, y);\n\n            if (side != null) {\n              currentCells.push({\n                row: i,\n                col: j\n              });\n            } // determine neighbour\n\n\n            var row = i,\n                col = j,\n                highlight = void 0,\n                neighbour = true;\n\n            if (side == Side.LEFT && j > 0) {\n              col = j - 1;\n              highlight = Side.RIGHT;\n            } else if (side == Side.RIGHT && j < cols - 1) {\n              col = j + 1;\n              highlight = Side.LEFT;\n            } else if (side == Side.TOP && i > 0) {\n              row = i - 1;\n              highlight = Side.BOT;\n            } else if (side == Side.BOT && i < rows - 1) {\n              row = i + 1;\n              highlight = Side.TOP;\n            } else {\n              neighbour = false;\n            } // highlight neighbour\n\n\n            if (neighbour) {\n              _this.boxes[row][col].highlight = highlight;\n              currentCells.push({\n                row: row,\n                col: col\n              });\n            } // no need to continue\n\n\n            break OUTER;\n          }\n        }\n      }\n    };\n\n    _this.handleClick = function () {\n      _this.setState({\n        color: Konva.Util.getRandomColor()\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(BoxCanvas, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      this.setState({\n        marginWidth: WIDTH / (this.state.colomn + 2),\n        marginHeight: HEIGHT / (this.state.row + 2)\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var border = 5;\n      var shadow = 5;\n      this.newGame();\n      var circles = this.drawCircleGrid().map(function (el, index) {\n        return React.createElement(Circle, {\n          key: index,\n          x: el.x,\n          y: el.y,\n          radius: 10,\n          fill: \"red\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 214\n          },\n          __self: this\n        });\n      });\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 218\n        },\n        __self: this\n      }, React.createElement(Stage, {\n        width: WIDTH + border * 2 + shadow,\n        height: HEIGHT + border * 2 + shadow,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 220\n        },\n        __self: this\n      }, React.createElement(Layer, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 221\n        },\n        __self: this\n      }, React.createElement(Rect, {\n        x: border,\n        y: border,\n        width: WIDTH + border,\n        height: HEIGHT + border,\n        fill: this.state.color,\n        shadowBlur: shadow,\n        stroke: 'black',\n        strokeWidth: border,\n        onClick: this.handleClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 222\n        },\n        __self: this\n      }), circles)));\n    }\n  }]);\n\n  return BoxCanvas;\n}(Component);\n\nexport { BoxCanvas as default };","map":{"version":3,"sources":["/home/simple/dots-boxes/src/components/BoxCanvas.js"],"names":["React","Component","WIDTH","HEIGHT","Stage","Layer","Rect","Circle","Line","Konva","Side","BOT","LEFT","RIGHT","TOP","Box","x","y","w","h","left","top","right","bottom","highlight","sideBot","owner","selected","sideLeft","sideRight","sideTop","contains","drawFill","drawSide","side","color","drawLine","drawSides","highlightSide","dBot","dLeft","dRight","dTop","dClosest","Math","min","BoxCanvas","state","row","colomn","marginWidth","marginHeight","playersTurn","x0","y0","x1","y1","line","points","stroke","tension","drawCircleGrid","coords","i","j","push","gridX","gridY","boxes","newGame","random","drawBoxes","box","square","rows","length","cols","currentCells","OUTER","col","neighbour","handleClick","setState","Util","getRandomColor","border","shadow","circles","map","el","index"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport {WIDTH, HEIGHT} from './constants'\nimport { Stage, Layer, Rect, Circle, Line } from 'react-konva';\nimport Konva from 'konva';\n\nconst Side = {\n    BOT: 0,\n    LEFT: 1,\n    RIGHT: 2,\n    TOP: 3\n}\n\nclass Box{\n    constructor(x, y, w, h){\n        this.w = w;\n        this.y = y;\n        this.left = x;\n        this.top = y;\n        this.right = x + w;\n        this.bottom = y + h;\n        this.highlight = null;\n        this.sideBot = {owner: null, selected: false };\n        this.sideLeft = {owner: null, selected: false };\n        this.sideRight = {owner: null, selected: false };\n        this.sideTop = {owner: null, selected: false };\n        \n        this.contains = function(x, y){\n            return x >= this.left && x < this.right && y >= this.top && y < this.bottom;\n        }\n\n        this.drawFill = function(){}\n\n        this.drawSide = function(side, color){\n            switch (side) {\n                case Side.BOT:\n                    this.drawLine(this.left, this.bottom, this.right, this.bottom, color);\n                    break;\n                case Side.LEFT:\n                    this.drawLine(this.left, this.top, this.left, this.bottom, color);\n                    break; \n                case Side.RIGHT:\n                    this.drawLine(this.right, this.top, this.right, this.bottom, color);\n                    break; \n                case Side.TOP:\n                    this.drawLine(this.left, this.top, this.right, this.top, color);\n                    break;  \n            }\n        }\n\n        this.drawSides = function(){\n            if (this.highlight != null){\n                this.drawSide(this.highlight, 'blue')\n            }\n        }\n\n        this.highlightSide = function(x, y){\n\n            let dBot = this.bottom - y;\n            let dLeft = x - this.left;\n            let dRight = this.right - x;\n            let dTop = this.top;\n\n            let dClosest = Math.min(dBot, dLeft, dRight, dTop);\n\n            if( dClosest == dBot && !this.sideBot.selected){\n                this.highlight = Side.BOT;\n            }else if( dClosest == dLeft && !this.sideLeft.selected){\n                this.highlight = Side.LEFT;\n            }else if( dClosest == dRight && !this.sideRight.selected){\n                this.highlight = Side.RIGHT;\n            }else if( dClosest == dTop && !this.sideTop.selected){\n                this.highlight = Side.TOP;\n            }\n\n            return this.highlight\n        }\n    }       \n}\n\nexport default class BoxCanvas extends Component{\n    \n    state = {\n        color: 'grey',\n        row: 4,\n        colomn: 6,\n        marginWidth: 0,\n        marginHeight: 0\n    };\n\n    playersTurn = 0;\n\n    \n    drawLine = (x0, y0, x1, y1) => {\n        var line = new Konva.Line({\n            x: 100,\n            y: 50,\n            points: [x0, y0, x1, y1],\n            stroke: 'blue',\n            tension: 1\n          });\n        return line\n    }\n\n    componentWillMount(){\n        this.setState({\n            marginWidth: WIDTH / (this.state.colomn + 2),\n            marginHeight: HEIGHT / (this.state.row + 2)\n        })\n    }\n    \n    drawCircleGrid = () => {\n        var coords = [];\n        for (let i = 0; i < this.state.row + 1; i++){\n            for (let j = 0; j < this.state.colomn + 1; j++){\n                coords.push({x: this.gridX(j),y: this.gridY(i)});       \n            }\n        }\n        return coords\n    }\n\n    gridX = (i) => this.state.marginWidth * (i + 1) \n\n    gridY = (j) => this.state.marginHeight  * (j + 1)\n\n\n    boxes = []\n    newGame = () => {\n        this.playersTurn = Math.random() >= 0.5;\n\n        \n        for (let i = 0; i < this.state.row; i++ ){\n            this.boxes[i] = []\n            for(let j = 0; j < this.state.colomn; j++){\n                this.boxes[i][j] = new Box(this.gridX(j), this.gridY(i), this.state.marginWidth, this.state.marginHeight);\n            }\n        }\n    }\n\n    drawBoxes = () => {\n        for (let row of this.boxes){\n            for(let box of row){\n                box.drawSides();\n                box.drawFill();\n            }\n        }\n    }\n\n    highlightSide = (x, y) => {\n\n        // clear previous highlighting\n        for (let row of this.boxes) {\n            for (let square of row) {\n                square.highlight = null;\n            }\n        }\n\n        // check each cell\n        let rows = this.boxes.length;\n        let cols = this.boxes[0].length;\n        var currentCells = [];\n        OUTER: for (let i = 0; i < rows; i++) {\n            for (let j = 0; j < cols; j++) {\n                if (this.boxes[i][j].contains(x, y)) {\n\n                    // highlight current\n                    let side = this.boxes[i][j].highlightSide(x, y);\n                    if (side != null) {\n                        currentCells.push({row: i, col: j});\n                    }\n\n                    // determine neighbour\n                    let row = i, col = j, highlight, neighbour = true;\n                    if (side == Side.LEFT && j > 0) {\n                        col = j - 1;\n                        highlight = Side.RIGHT;\n                    } else if (side == Side.RIGHT && j < cols - 1) {\n                        col = j + 1;\n                        highlight = Side.LEFT;\n                    } else if (side == Side.TOP && i > 0) {\n                        row = i - 1;\n                        highlight = Side.BOT;\n                    } else if (side == Side.BOT && i < rows - 1) {\n                        row = i + 1;\n                        highlight = Side.TOP;\n                    } else {\n                        neighbour = false;\n                    }\n\n                    // highlight neighbour\n                    if (neighbour) {\n                        this.boxes[row][col].highlight = highlight;\n                        currentCells.push({row: row, col: col});\n                    }\n\n                    // no need to continue\n                    break OUTER;\n                }\n            }\n        }\n    }\n    \n    \n    handleClick = () => {\n        this.setState({\n          color: Konva.Util.getRandomColor()\n        });\n    }\n    \n    render(){   \n        const border = 5;\n        const shadow = 5;\n        this.newGame();\n        const circles = this.drawCircleGrid().map((el,index)=>{\n            return <Circle key={index} x={el.x} y={el.y} radius={10} fill=\"red\" />\n        }) \n\n        return(\n            <div>\n                 \n                <Stage  width={WIDTH+border*2+shadow} height={HEIGHT+border*2+shadow}>\n                    <Layer> \n                        <Rect\n                            x={border}\n                            y={border}\n                            width={WIDTH+border}\n                            height={HEIGHT+border}\n                            fill={this.state.color}\n                            shadowBlur={shadow}\n                            stroke={'black'} \n                            strokeWidth={border}\n                            onClick={this.handleClick}\n                        >  \n                        </Rect>\n                        \n                        {circles}\n                        \n                    </Layer>\n                </Stage> \n            </div>\n        )\n    }\n}"]},"metadata":{},"sourceType":"module"}