{"ast":null,"code":"import _classCallCheck from \"/home/simple/dots-boxes/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/simple/dots-boxes/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/simple/dots-boxes/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/simple/dots-boxes/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/simple/dots-boxes/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/simple/dots-boxes/src/components/BoxCanvas.js\";\nimport React, { Component } from 'react';\nimport { WIDTH, HEIGHT, COLORS } from './constants';\nimport { Stage, Layer, Rect, Text, Circle, Line } from 'react-konva';\nimport Konva from 'konva';\n\nvar BoxCanvas =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(BoxCanvas, _Component);\n\n  function BoxCanvas() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, BoxCanvas);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(BoxCanvas)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      color: 'grey',\n      row: 5,\n      colomn: 6\n    };\n\n    _this.drawCircleGrid = function () {\n      for (var i = 0; i < _this.state.row + 1; i++) {\n        for (var j = 0; i < _this.state.colomn + 1; i++) {\n          // this.drowCircle(i,j);\n          return React.createElement(Circle, {\n            x: i * 10,\n            y: j * 10,\n            radius: 20,\n            fill: \"red\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 18\n            },\n            __self: this\n          });\n        }\n      }\n    };\n\n    _this.drowCircle = function (i, j) {\n      return React.createElement(Circle, {\n        x: i,\n        y: j,\n        radius: 2,\n        fill: \"red\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 23\n        },\n        __self: this\n      });\n    };\n\n    _this.handleClick = function () {\n      _this.setState({\n        color: Konva.Util.getRandomColor()\n      });\n    };\n\n    _this.componentDidMount = function () {};\n\n    return _this;\n  }\n\n  _createClass(BoxCanvas, [{\n    key: \"render\",\n    value: function render() {\n      var border = 5;\n      var shadow = 5;\n      console.log(COLORS.body);\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }, React.createElement(Stage, {\n        width: WIDTH + border * 2 + shadow,\n        height: HEIGHT + border * 2 + shadow,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }, React.createElement(Layer, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47\n        },\n        __self: this\n      }, React.createElement(Rect, {\n        x: border,\n        y: border,\n        width: WIDTH + border,\n        height: HEIGHT + border,\n        fill: this.state.color,\n        shadowBlur: shadow,\n        stroke: 'black',\n        strokeWidth: border,\n        onClick: this.handleClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      }), this.drawCircleGrid())));\n    }\n  }]);\n\n  return BoxCanvas;\n}(Component);\n\nexport { BoxCanvas as default };","map":{"version":3,"sources":["/home/simple/dots-boxes/src/components/BoxCanvas.js"],"names":["React","Component","WIDTH","HEIGHT","COLORS","Stage","Layer","Rect","Text","Circle","Line","Konva","BoxCanvas","state","color","row","colomn","drawCircleGrid","i","j","drowCircle","handleClick","setState","Util","getRandomColor","componentDidMount","border","shadow","console","log","body"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAAQC,KAAR,EAAeC,MAAf,EAAuBC,MAAvB,QAAoC,aAApC;AACA,SAASC,KAAT,EAAgBC,KAAhB,EAAuBC,IAAvB,EAA6BC,IAA7B,EAAmCC,MAAnC,EAA2CC,IAA3C,QAAuD,aAAvD;AACA,OAAOC,KAAP,MAAkB,OAAlB;;IAEqBC,S;;;;;;;;;;;;;;;;;UAEjBC,K,GAAQ;AACJC,MAAAA,KAAK,EAAE,MADH;AAEJC,MAAAA,GAAG,EAAE,CAFD;AAGJC,MAAAA,MAAM,EAAE;AAHJ,K;;UAMRC,c,GAAiB,YAAM;AACnB,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,MAAKL,KAAL,CAAWE,GAAX,GAAiB,CAArC,EAAwCG,CAAC,EAAzC,EAA4C;AACxC,aAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBD,CAAC,GAAG,MAAKL,KAAL,CAAWG,MAAX,GAAoB,CAAxC,EAA2CE,CAAC,EAA5C,EAA+C;AAC3C;AACA,iBAAO,oBAAC,MAAD;AAAQ,YAAA,CAAC,EAAEA,CAAC,GAAC,EAAb;AAAiB,YAAA,CAAC,EAAEC,CAAC,GAAC,EAAtB;AAA0B,YAAA,MAAM,EAAE,EAAlC;AAAsC,YAAA,IAAI,EAAC,KAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACH;AACJ;AACJ,K;;UAEDC,U,GAAa,UAACF,CAAD,EAAGC,CAAH;AAAA,aAAS,oBAAC,MAAD;AAAQ,QAAA,CAAC,EAAED,CAAX;AAAc,QAAA,CAAC,EAAEC,CAAjB;AAAoB,QAAA,MAAM,EAAE,CAA5B;AAA+B,QAAA,IAAI,EAAC,KAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAT;AAAA,K;;UAIbE,W,GAAc,YAAM;AAChB,YAAKC,QAAL,CAAc;AACZR,QAAAA,KAAK,EAAEH,KAAK,CAACY,IAAN,CAAWC,cAAX;AADK,OAAd;AAGH,K;;UAEDC,iB,GAAoB,YAAM,CAEzB,C;;;;;;;6BAIO;AACJ,UAAMC,MAAM,GAAG,CAAf;AACA,UAAMC,MAAM,GAAG,CAAf;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYzB,MAAM,CAAC0B,IAAnB;AACA,aACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAEI,oBAAC,KAAD;AAAO,QAAA,KAAK,EAAE5B,KAAK,GAACwB,MAAM,GAAC,CAAb,GAAeC,MAA7B;AAAqC,QAAA,MAAM,EAAExB,MAAM,GAACuB,MAAM,GAAC,CAAd,GAAgBC,MAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,IAAD;AACI,QAAA,CAAC,EAAED,MADP;AAEI,QAAA,CAAC,EAAEA,MAFP;AAGI,QAAA,KAAK,EAAExB,KAAK,GAACwB,MAHjB;AAII,QAAA,MAAM,EAAEvB,MAAM,GAACuB,MAJnB;AAKI,QAAA,IAAI,EAAE,KAAKb,KAAL,CAAWC,KALrB;AAMI,QAAA,UAAU,EAAEa,MANhB;AAOI,QAAA,MAAM,EAAE,OAPZ;AAQI,QAAA,WAAW,EAAED,MARjB;AASI,QAAA,OAAO,EAAE,KAAKL,WATlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,EAaK,KAAKJ,cAAL,EAbL,CADJ,CAFJ,CADJ;AAuBH;;;;EA5DkChB,S;;SAAlBW,S","sourcesContent":["import React, { Component } from 'react';\nimport {WIDTH, HEIGHT, COLORS} from './constants'\nimport { Stage, Layer, Rect, Text, Circle, Line } from 'react-konva';\nimport Konva from 'konva';\n\nexport default class BoxCanvas extends Component{\n    \n    state = {\n        color: 'grey',\n        row: 5,\n        colomn: 6\n    };\n\n    drawCircleGrid = () => {\n        for (let i = 0; i < this.state.row + 1; i++){\n            for (let j = 0; i < this.state.colomn + 1; i++){\n                // this.drowCircle(i,j);\n                return <Circle x={i*10} y={j*10} radius={20} fill=\"red\" />\n            }\n        }\n    }\n\n    drowCircle = (i,j) => <Circle x={i} y={j} radius={2} fill=\"red\" />\n    \n\n    \n    handleClick = () => {\n        this.setState({\n          color: Konva.Util.getRandomColor()\n        });\n    }\n\n    componentDidMount = () => {\n\n    }\n\n\n    \n    render(){   \n        const border = 5;\n        const shadow = 5;\n        console.log(COLORS.body)\n        return(\n            <div>\n                 \n                <Stage width={WIDTH+border*2+shadow} height={HEIGHT+border*2+shadow}>\n                    <Layer> \n                        <Rect\n                            x={border}\n                            y={border}\n                            width={WIDTH+border}\n                            height={HEIGHT+border}\n                            fill={this.state.color}\n                            shadowBlur={shadow}\n                            stroke={'black'} \n                            strokeWidth={border}\n                            onClick={this.handleClick}\n                        >  \n                        </Rect>\n                        {this.drawCircleGrid()}\n                        {/* <Circle x={200} y={100} radius={10} fill=\"red\" /> */}\n                    </Layer>\n                </Stage> \n            </div>\n        )\n    }\n}"]},"metadata":{},"sourceType":"module"}