{"ast":null,"code":"import _classCallCheck from \"/home/simple/dots-boxes/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/simple/dots-boxes/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/simple/dots-boxes/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/simple/dots-boxes/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/simple/dots-boxes/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/simple/dots-boxes/src/components/BodyCanvas.js\";\nimport React, { Component } from 'react';\nimport { WIDTH, HEIGHT } from './constants';\nimport { Stage, Layer, Rect, Circle } from 'react-konva';\nimport Konva from 'konva';\nimport SideLine from './SideLine';\nimport Box from './Box';\n\nvar BoxCanvas =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(BoxCanvas, _Component);\n\n  function BoxCanvas() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, BoxCanvas);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(BoxCanvas)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      colorBody: 'grey',\n      colorLine: 'brown',\n      colorBoxes: 'violet',\n      row: 5,\n      colomn: 6,\n      marginWidth: 0,\n      marginHeight: 0\n    };\n\n    _this.circleGridCoords = function () {\n      var coords = [];\n\n      for (var i = 0; i < _this.state.row + 1; i++) {\n        for (var j = 0; j < _this.state.colomn + 1; j++) {\n          coords.push({\n            x: _this.gridX(j),\n            y: _this.gridY(i)\n          });\n        }\n      }\n\n      return coords;\n    };\n\n    _this.lineVerticalCoords = function () {\n      var coords = [];\n\n      for (var i = 0; i < _this.state.row + 1; i++) {\n        for (var j = 0; j < _this.state.colomn; j++) {\n          coords.push({\n            x0: _this.gridX(j),\n            y0: _this.gridY(i),\n            x1: _this.gridX(j) + _this.state.marginWidth,\n            y1: _this.gridY(i)\n          });\n        }\n      }\n\n      return coords;\n    };\n\n    _this.lineHorisontalCoords = function () {\n      var coords = [];\n\n      for (var i = 0; i < _this.state.row; i++) {\n        for (var j = 0; j < _this.state.colomn + 1; j++) {\n          coords.push({\n            x0: _this.gridX(j),\n            y0: _this.gridY(i),\n            x1: _this.gridX(j),\n            y1: _this.gridY(i) + _this.state.marginHeight\n          });\n        }\n      }\n\n      return coords;\n    };\n\n    _this.coords = [];\n\n    _this.boxesCoords = function () {\n      for (var i = 0; i < _this.state.row; i++) {\n        for (var j = 0; j < _this.state.colomn; j++) {\n          coords.push({\n            left: _this.gridX(j),\n            top: _this.gridY(i),\n            right: _this.gridX(j) + _this.state.marginWidth,\n            bottom: _this.gridY(i) + _this.state.marginHeight\n          }, sides = {\n            left: false,\n            top: false,\n            right: false,\n            bottom: false\n          });\n        }\n      }\n\n      return coords;\n    };\n\n    _this.gridX = function (i) {\n      return _this.state.marginWidth * (i + 1);\n    };\n\n    _this.gridY = function (j) {\n      return _this.state.marginHeight * (j + 1);\n    };\n\n    _this.handleClick = function () {\n      _this.setState({\n        color: Konva.Util.getRandomColor()\n      });\n    };\n\n    _this.handleClickLine = function (el) {\n      console.log(el);\n    };\n\n    return _this;\n  }\n\n  _createClass(BoxCanvas, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      this.setState({\n        marginWidth: WIDTH / (this.state.colomn + 2),\n        marginHeight: HEIGHT / (this.state.row + 2)\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var border = 5;\n      var shadow = 5; // this.newGame();\n\n      var circles = this.circleGridCoords().map(function (el, index) {\n        return React.createElement(Circle, {\n          key: index,\n          x: el.x,\n          y: el.y,\n          radius: 10,\n          fill: \"red\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 104\n          },\n          __self: this\n        });\n      }); // const lines = this.drawLine(20,20,100,20)\n\n      var linesVertical = this.lineVerticalCoords().map(function (el, index) {\n        return (// this.drawLine(el.x0, el.y0, el.x1, el.y1, index)\n          React.createElement(SideLine, {\n            key: index,\n            x0: el.x0,\n            y0: el.y0,\n            x1: el.x1,\n            y1: el.y1,\n            index: index + 1,\n            color: _this2.state.colorLine,\n            onClick: _this2.handleClickLine,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 110\n            },\n            __self: this\n          })\n        );\n      });\n      var linesHorisontal = this.lineHorisontalCoords().map(function (el, index) {\n        return (// this.drawLine(el.x0, el.y0, el.x1, el.y1, index)\n          React.createElement(SideLine, {\n            key: index,\n            x0: el.x0,\n            y0: el.y0,\n            x1: el.x1,\n            y1: el.y1,\n            index: new Date(),\n            color: _this2.state.colorLine,\n            onClick: _this2.handleClickLine,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 126\n            },\n            __self: this\n          })\n        );\n      });\n      var boxes = this.boxesCoords().map(function (el, index) {\n        return React.createElement(Box, {\n          key: index,\n          left: el.left,\n          top: el.top,\n          right: el.right,\n          bottom: el.bottom,\n          color: _this2.state.colorBoxes,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 141\n          },\n          __self: this\n        });\n      });\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153\n        },\n        __self: this\n      }, React.createElement(Stage, {\n        onMouseMove: this.highlightSide,\n        width: WIDTH + border * 2 + shadow,\n        height: HEIGHT + border * 2 + shadow,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155\n        },\n        __self: this\n      }, React.createElement(Layer, {\n        ref: \"layer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156\n        },\n        __self: this\n      }, React.createElement(Rect, {\n        x: border,\n        y: border,\n        width: WIDTH + border,\n        height: HEIGHT + border,\n        fill: this.state.colorBody // shadowBlur={shadow}\n        ,\n        stroke: 'black',\n        strokeWidth: border // onClick={this.handleClick}\n        ,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157\n        },\n        __self: this\n      }), boxes, linesVertical, linesHorisontal, circles)));\n    }\n  }]);\n\n  return BoxCanvas;\n}(Component); // boxes = []\n// newGame = () => {\n//     this.playersTurn = Math.random() >= 0.5;\n//     for (let i = 0; i < this.state.row; i++ ){\n//         this.boxes[i] = []\n//         for(let j = 0; j < this.state.colomn; j++){\n//             this.boxes[i][j] = new Box(this.gridX(j), this.gridY(i), this.state.marginWidth, this.state.marginHeight);\n//         }\n//     }\n// }\n// drawBoxes = () => {\n//     for (let row of this.boxes){\n//         for(let box of row){\n//             box.drawSides();\n//             box.drawFill();\n//         }\n//     }\n// }\n// highlightSide = (x, y) => {\n//     // clear previous highlighting\n//     for (let row of this.boxes) {\n//         for (let square of row) {\n//             square.highlight = null;\n//         }\n//     }\n//     // check each cell\n//     let rows = this.boxes.length;\n//     let cols = this.boxes[0].length;\n//     var currentCells = [];\n//     OUTER: for (let i = 0; i < rows; i++) {\n//         for (let j = 0; j < cols; j++) {\n//             if (this.boxes[i][j].contains(x, y)) {\n//                 // highlight current\n//                 let side = this.boxes[i][j].highlightSide(x, y);\n//                 if (side != null) {\n//                     currentCells.push({row: i, col: j});\n//                 }\n//                 // determine neighbour\n//                 let row = i, col = j, highlight, neighbour = true;\n//                 if (side == Side.LEFT && j > 0) {\n//                     col = j - 1;\n//                     highlight = Side.RIGHT;\n//                 } else if (side == Side.RIGHT && j < cols - 1) {\n//                     col = j + 1;\n//                     highlight = Side.LEFT;\n//                 } else if (side == Side.TOP && i > 0) {\n//                     row = i - 1;\n//                     highlight = Side.BOT;\n//                 } else if (side == Side.BOT && i < rows - 1) {\n//                     row = i + 1;\n//                     highlight = Side.TOP;\n//                 } else {\n//                     neighbour = false;\n//                 }\n//                 // highlight neighbour\n//                 if (neighbour) {\n//                     this.boxes[row][col].highlight = highlight;\n//                     currentCells.push({row: row, col: col});\n//                 }\n//                 // no need to continue\n//                 break OUTER;\n//             }\n//         }\n//     }\n// }\n\n\nexport { BoxCanvas as default };","map":{"version":3,"sources":["/home/simple/dots-boxes/src/components/BodyCanvas.js"],"names":["React","Component","WIDTH","HEIGHT","Stage","Layer","Rect","Circle","Konva","SideLine","Box","BoxCanvas","state","colorBody","colorLine","colorBoxes","row","colomn","marginWidth","marginHeight","circleGridCoords","coords","i","j","push","x","gridX","y","gridY","lineVerticalCoords","x0","y0","x1","y1","lineHorisontalCoords","boxesCoords","left","top","right","bottom","sides","handleClick","setState","color","Util","getRandomColor","handleClickLine","el","console","log","border","shadow","circles","map","index","linesVertical","linesHorisontal","Date","boxes","highlightSide"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport {WIDTH, HEIGHT} from './constants'\nimport { Stage, Layer, Rect, Circle } from 'react-konva';\nimport Konva from 'konva';\nimport SideLine from './SideLine'\nimport Box from './Box'\n\n\nexport default class BoxCanvas extends Component{\n    \n    state = {\n        colorBody: 'grey',\n        colorLine: 'brown',\n        colorBoxes: 'violet',\n        row: 5,\n        colomn: 6,\n        marginWidth: 0,\n        marginHeight: 0\n    };\n\n    componentWillMount(){ \n        this.setState({\n            marginWidth: WIDTH / (this.state.colomn + 2),\n            marginHeight: HEIGHT / (this.state.row + 2)\n        })\n    } \n    \n    circleGridCoords = () => {\n        var coords = [];\n        for (let i = 0; i < this.state.row + 1; i++){\n            for (let j = 0; j < this.state.colomn + 1; j++){\n                coords.push({x: this.gridX(j),y: this.gridY(i)});       \n            }\n        }\n        return coords\n    }\n\n    lineVerticalCoords = () => {\n        var coords = [];\n        for (let i = 0; i < this.state.row + 1; i++){\n            for (let j = 0; j < this.state.colomn; j++){\n                coords.push({\n                    x0: this.gridX(j), \n                    y0: this.gridY(i), \n                    x1: this.gridX(j) + this.state.marginWidth, \n                    y1: this.gridY(i)}\n                );       \n            }\n        }\n        return coords\n    }\n\n    lineHorisontalCoords = () => {\n        var coords = [];\n        for (let i = 0; i < this.state.row ; i++){\n            for (let j = 0; j < this.state.colomn +1; j++){\n                coords.push({\n                    x0: this.gridX(j), \n                    y0: this.gridY(i), \n                    x1: this.gridX(j), \n                    y1: this.gridY(i) + this.state.marginHeight}\n                );       \n            }\n        }\n        return coords\n    }\n\n    coords = []\n    boxesCoords = () => {\n        for (let i = 0; i < this.state.row ; i++){\n            for (let j = 0; j < this.state.colomn; j++){\n                coords.push({\n                    left: this.gridX(j), \n                    top: this.gridY(i), \n                    right: this.gridX(j) + this.state.marginWidth, \n                    bottom: this.gridY(i) + this.state.marginHeight},\n                    sides = {left: false, top: false, right: false, bottom: false}\n                );       \n            }\n        }\n        return coords\n    }\n\n    gridX = (i) => this.state.marginWidth * (i + 1) \n\n    gridY = (j) => this.state.marginHeight  * (j + 1)\n \n    handleClick = () => {\n        this.setState({\n          color: Konva.Util.getRandomColor()\n        });\n    }\n\n    handleClickLine = (el) => {\n        console.log(el);\n\n    }\n    \n    render(){   \n        const border = 5;\n        const shadow = 5;\n        // this.newGame();\n        const circles = this.circleGridCoords().map((el,index)=>{\n            return <Circle key={index} x={el.x} y={el.y} radius={10} fill=\"red\" />\n        })\n        // const lines = this.drawLine(20,20,100,20)\n        const linesVertical = this.lineVerticalCoords().map((el,index)=>{\n            return (\n                // this.drawLine(el.x0, el.y0, el.x1, el.y1, index)\n                <SideLine\n                    key = {index}  \n                    x0 ={el.x0}\n                    y0 = {el.y0}\n                    x1 = {el.x1} \n                    y1 = {el.y1}\n                    index = {index+1}\n                    color = {this.state.colorLine}\n                    onClick = {this.handleClickLine}\n                />\n            )\n        })\n\n        const linesHorisontal = this.lineHorisontalCoords().map((el,index)=>{\n            return (\n                // this.drawLine(el.x0, el.y0, el.x1, el.y1, index)\n                <SideLine\n                    key = {index} \n                    x0 ={el.x0}\n                    y0 = {el.y0}\n                    x1 = {el.x1} \n                    y1 = {el.y1}\n                    index = {new Date()}\n                    color = {this.state.colorLine}\n                    onClick = {this.handleClickLine}\n                />\n            )\n        })\n        \n        const boxes = this.boxesCoords().map((el, index) =>{\n            return (\n                <Box\n                    key = {index}\n                    left={el.left}\n                    top={el.top}\n                    right={el.right}\n                    bottom={el.bottom}\n                    color={this.state.colorBoxes}\n                />  \n            )\n        })\n       \n        return(\n            <div>\n                 \n                <Stage onMouseMove={this.highlightSide} width={WIDTH+border*2+shadow} height={HEIGHT+border*2+shadow}>\n                    <Layer ref= 'layer'> \n                        <Rect\n                            x={border}\n                            y={border}\n                            width={WIDTH+border}\n                            height={HEIGHT+border}\n                            fill={this.state.colorBody}\n                           // shadowBlur={shadow}\n                            stroke={'black'} \n                            strokeWidth={border}\n                            // onClick={this.handleClick}\n                        />  \n                        {boxes}\n                        {linesVertical}\n                        {linesHorisontal}\n                        {circles}\n  \n                    </Layer>\n                </Stage> \n            </div>\n        )\n    }\n}\n\n\n\n\n\n\n\n\n\n// boxes = []\n    // newGame = () => {\n    //     this.playersTurn = Math.random() >= 0.5;\n\n        \n    //     for (let i = 0; i < this.state.row; i++ ){\n    //         this.boxes[i] = []\n    //         for(let j = 0; j < this.state.colomn; j++){\n    //             this.boxes[i][j] = new Box(this.gridX(j), this.gridY(i), this.state.marginWidth, this.state.marginHeight);\n    //         }\n    //     }\n    // }\n\n    // drawBoxes = () => {\n    //     for (let row of this.boxes){\n    //         for(let box of row){\n    //             box.drawSides();\n    //             box.drawFill();\n    //         }\n    //     }\n    // }\n\n    // highlightSide = (x, y) => {\n\n    //     // clear previous highlighting\n    //     for (let row of this.boxes) {\n    //         for (let square of row) {\n    //             square.highlight = null;\n    //         }\n    //     }\n\n    //     // check each cell\n    //     let rows = this.boxes.length;\n    //     let cols = this.boxes[0].length;\n    //     var currentCells = [];\n    //     OUTER: for (let i = 0; i < rows; i++) {\n    //         for (let j = 0; j < cols; j++) {\n    //             if (this.boxes[i][j].contains(x, y)) {\n\n    //                 // highlight current\n    //                 let side = this.boxes[i][j].highlightSide(x, y);\n    //                 if (side != null) {\n    //                     currentCells.push({row: i, col: j});\n    //                 }\n\n    //                 // determine neighbour\n    //                 let row = i, col = j, highlight, neighbour = true;\n    //                 if (side == Side.LEFT && j > 0) {\n    //                     col = j - 1;\n    //                     highlight = Side.RIGHT;\n    //                 } else if (side == Side.RIGHT && j < cols - 1) {\n    //                     col = j + 1;\n    //                     highlight = Side.LEFT;\n    //                 } else if (side == Side.TOP && i > 0) {\n    //                     row = i - 1;\n    //                     highlight = Side.BOT;\n    //                 } else if (side == Side.BOT && i < rows - 1) {\n    //                     row = i + 1;\n    //                     highlight = Side.TOP;\n    //                 } else {\n    //                     neighbour = false;\n    //                 }\n\n    //                 // highlight neighbour\n    //                 if (neighbour) {\n    //                     this.boxes[row][col].highlight = highlight;\n    //                     currentCells.push({row: row, col: col});\n    //                 }\n\n    //                 // no need to continue\n    //                 break OUTER;\n    //             }\n    //         }\n    //     }\n    // }"]},"metadata":{},"sourceType":"module"}